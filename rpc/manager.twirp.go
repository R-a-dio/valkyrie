// Code generated by protoc-gen-twirp v5.5.0, DO NOT EDIT.
// source: rpc/manager.proto

package rpc

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// =================
// Manager Interface
// =================

type Manager interface {
	// Status returns the current status
	Status(context.Context, *StatusRequest) (*StatusResponse, error)

	SetUser(context.Context, *User) (*User, error)

	SetSong(context.Context, *Song) (*Song, error)

	SetBotConfig(context.Context, *BotConfig) (*BotConfig, error)

	SetThread(context.Context, *Thread) (*Thread, error)

	SetListenerInfo(context.Context, *ListenerInfo) (*ListenerInfo, error)
}

// =======================
// Manager Protobuf Client
// =======================

type managerProtobufClient struct {
	client HTTPClient
	urls   [6]string
}

// NewManagerProtobufClient creates a Protobuf client that implements the Manager interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewManagerProtobufClient(addr string, client HTTPClient) Manager {
	prefix := urlBase(addr) + ManagerPathPrefix
	urls := [6]string{
		prefix + "Status",
		prefix + "SetUser",
		prefix + "SetSong",
		prefix + "SetBotConfig",
		prefix + "SetThread",
		prefix + "SetListenerInfo",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &managerProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &managerProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *managerProtobufClient) Status(ctx context.Context, in *StatusRequest) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio.rpc")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "Status")
	out := new(StatusResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerProtobufClient) SetUser(ctx context.Context, in *User) (*User, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio.rpc")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "SetUser")
	out := new(User)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerProtobufClient) SetSong(ctx context.Context, in *Song) (*Song, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio.rpc")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "SetSong")
	out := new(Song)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerProtobufClient) SetBotConfig(ctx context.Context, in *BotConfig) (*BotConfig, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio.rpc")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "SetBotConfig")
	out := new(BotConfig)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerProtobufClient) SetThread(ctx context.Context, in *Thread) (*Thread, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio.rpc")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "SetThread")
	out := new(Thread)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerProtobufClient) SetListenerInfo(ctx context.Context, in *ListenerInfo) (*ListenerInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio.rpc")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "SetListenerInfo")
	out := new(ListenerInfo)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===================
// Manager JSON Client
// ===================

type managerJSONClient struct {
	client HTTPClient
	urls   [6]string
}

// NewManagerJSONClient creates a JSON client that implements the Manager interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewManagerJSONClient(addr string, client HTTPClient) Manager {
	prefix := urlBase(addr) + ManagerPathPrefix
	urls := [6]string{
		prefix + "Status",
		prefix + "SetUser",
		prefix + "SetSong",
		prefix + "SetBotConfig",
		prefix + "SetThread",
		prefix + "SetListenerInfo",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &managerJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &managerJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *managerJSONClient) Status(ctx context.Context, in *StatusRequest) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio.rpc")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "Status")
	out := new(StatusResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerJSONClient) SetUser(ctx context.Context, in *User) (*User, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio.rpc")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "SetUser")
	out := new(User)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerJSONClient) SetSong(ctx context.Context, in *Song) (*Song, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio.rpc")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "SetSong")
	out := new(Song)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerJSONClient) SetBotConfig(ctx context.Context, in *BotConfig) (*BotConfig, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio.rpc")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "SetBotConfig")
	out := new(BotConfig)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerJSONClient) SetThread(ctx context.Context, in *Thread) (*Thread, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio.rpc")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "SetThread")
	out := new(Thread)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerJSONClient) SetListenerInfo(ctx context.Context, in *ListenerInfo) (*ListenerInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio.rpc")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "SetListenerInfo")
	out := new(ListenerInfo)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ======================
// Manager Server Handler
// ======================

type managerServer struct {
	Manager
	hooks *twirp.ServerHooks
}

func NewManagerServer(svc Manager, hooks *twirp.ServerHooks) TwirpServer {
	return &managerServer{
		Manager: svc,
		hooks:   hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *managerServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// ManagerPathPrefix is used for all URL paths on a twirp Manager server.
// Requests are always: POST ManagerPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const ManagerPathPrefix = "/twirp/radio.rpc.Manager/"

func (s *managerServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "radio.rpc")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/radio.rpc.Manager/Status":
		s.serveStatus(ctx, resp, req)
		return
	case "/twirp/radio.rpc.Manager/SetUser":
		s.serveSetUser(ctx, resp, req)
		return
	case "/twirp/radio.rpc.Manager/SetSong":
		s.serveSetSong(ctx, resp, req)
		return
	case "/twirp/radio.rpc.Manager/SetBotConfig":
		s.serveSetBotConfig(ctx, resp, req)
		return
	case "/twirp/radio.rpc.Manager/SetThread":
		s.serveSetThread(ctx, resp, req)
		return
	case "/twirp/radio.rpc.Manager/SetListenerInfo":
		s.serveSetListenerInfo(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *managerServer) serveStatus(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveStatusJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveStatusProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *managerServer) serveStatusJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Status")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(StatusRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.Status(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling Status. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveStatusProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Status")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(StatusRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.Status(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling Status. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveSetUser(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetUserJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetUserProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *managerServer) serveSetUserJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(User)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *User
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.SetUser(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *User and nil error while calling SetUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveSetUserProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(User)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *User
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.SetUser(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *User and nil error while calling SetUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveSetSong(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetSongJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetSongProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *managerServer) serveSetSongJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetSong")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(Song)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *Song
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.SetSong(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Song and nil error while calling SetSong. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveSetSongProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetSong")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(Song)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *Song
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.SetSong(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Song and nil error while calling SetSong. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveSetBotConfig(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetBotConfigJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetBotConfigProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *managerServer) serveSetBotConfigJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetBotConfig")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(BotConfig)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BotConfig
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.SetBotConfig(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BotConfig and nil error while calling SetBotConfig. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveSetBotConfigProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetBotConfig")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(BotConfig)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BotConfig
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.SetBotConfig(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BotConfig and nil error while calling SetBotConfig. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveSetThread(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetThreadJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetThreadProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *managerServer) serveSetThreadJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetThread")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(Thread)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *Thread
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.SetThread(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Thread and nil error while calling SetThread. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveSetThreadProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetThread")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(Thread)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *Thread
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.SetThread(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Thread and nil error while calling SetThread. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveSetListenerInfo(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetListenerInfoJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetListenerInfoProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *managerServer) serveSetListenerInfoJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetListenerInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ListenerInfo)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *ListenerInfo
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.SetListenerInfo(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListenerInfo and nil error while calling SetListenerInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveSetListenerInfoProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetListenerInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(ListenerInfo)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *ListenerInfo
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.SetListenerInfo(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListenerInfo and nil error while calling SetListenerInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor1, 0
}

func (s *managerServer) ProtocGenTwirpVersion() string {
	return "v5.5.0"
}

var twirpFileDescriptor1 = []byte{
	// 529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x55, 0xd2, 0x34, 0x89, 0xa7, 0x69, 0x43, 0x57, 0x08, 0x5c, 0x0b, 0xd4, 0x62, 0x2e, 0x54,
	0xd0, 0x44, 0xb4, 0x12, 0x07, 0x04, 0x97, 0x56, 0x1c, 0x2a, 0x51, 0x09, 0xad, 0xcb, 0x85, 0x8b,
	0xb5, 0xf6, 0x4e, 0xd2, 0x55, 0xec, 0x5d, 0xb3, 0xbb, 0x41, 0xea, 0x1f, 0xf1, 0x45, 0x7c, 0x0b,
	0x47, 0xe4, 0xb5, 0x9d, 0x9a, 0x24, 0xbd, 0x79, 0xde, 0x7b, 0x63, 0xcd, 0x9b, 0x79, 0x36, 0x1c,
	0xea, 0x22, 0x9d, 0xe6, 0x4c, 0xb2, 0x39, 0xea, 0x49, 0xa1, 0x95, 0x55, 0xc4, 0xd3, 0x8c, 0x0b,
	0x35, 0xd1, 0x45, 0x1a, 0x8e, 0x61, 0x3f, 0xb2, 0xcc, 0x2e, 0x0d, 0xc5, 0x9f, 0x4b, 0x34, 0x36,
	0xfc, 0xdb, 0x81, 0x83, 0x06, 0x31, 0x85, 0x92, 0x06, 0xc9, 0x6b, 0xe8, 0x2d, 0x0d, 0x6a, 0xbf,
	0x73, 0xd2, 0x79, 0xb3, 0x77, 0x3e, 0x9e, 0xac, 0xba, 0x27, 0xdf, 0x0d, 0x6a, 0xea, 0xc8, 0x52,
	0x64, 0x94, 0x9c, 0xfb, 0xdd, 0x0d, 0x51, 0xa4, 0xe4, 0x9c, 0x3a, 0x92, 0x7c, 0x82, 0xfd, 0x4c,
	0x18, 0x8b, 0x12, 0x75, 0x2c, 0xe4, 0x4c, 0xf9, 0x3b, 0x4e, 0xfd, 0xbc, 0xa5, 0xfe, 0x5a, 0xf3,
	0xd7, 0x72, 0xa6, 0xe8, 0x28, 0x6b, 0x55, 0xe4, 0x14, 0xfa, 0xf6, 0x4e, 0x23, 0xe3, 0x7e, 0xcf,
	0xb5, 0x1d, 0xb6, 0xda, 0x6e, 0x1d, 0x41, 0x6b, 0x01, 0xb9, 0x00, 0x48, 0x94, 0x8d, 0x53, 0x25,
	0x67, 0x62, 0xee, 0xef, 0x3a, 0xf9, 0xd3, 0x96, 0xfc, 0x52, 0xd9, 0x2b, 0xc7, 0x51, 0x2f, 0x69,
	0x1e, 0xc3, 0xdf, 0x1d, 0xe8, 0x95, 0xc3, 0x92, 0x03, 0xe8, 0x0a, 0xee, 0xec, 0xee, 0xd2, 0xae,
	0xe0, 0x24, 0x80, 0x61, 0x8e, 0x96, 0x71, 0x66, 0x99, 0xf3, 0xe7, 0xd1, 0x55, 0x4d, 0x5e, 0x02,
	0x18, 0xcb, 0xb4, 0x8d, 0xad, 0xc8, 0xd1, 0xf9, 0xd9, 0xa1, 0x9e, 0x43, 0x6e, 0x45, 0x8e, 0xe4,
	0x08, 0x86, 0x28, 0x79, 0x45, 0xf6, 0x1c, 0x39, 0x40, 0xc9, 0x1b, 0xca, 0x6a, 0x96, 0x2e, 0x62,
	0xc1, 0xdd, 0x84, 0xbb, 0x74, 0xe0, 0xea, 0x6b, 0x4e, 0x8e, 0x61, 0x2f, 0x63, 0xc6, 0xc6, 0x45,
	0xc6, 0xee, 0x91, 0xfb, 0x7d, 0xd7, 0x08, 0x25, 0xf4, 0xcd, 0x21, 0xe1, 0x09, 0xf4, 0x2b, 0xc7,
	0xe4, 0xd9, 0x6a, 0x29, 0x1d, 0x37, 0x59, 0x5d, 0x85, 0x1f, 0xc0, 0x5b, 0x99, 0x24, 0xa7, 0xf0,
	0x44, 0x57, 0xf7, 0x35, 0x31, 0x4a, 0x96, 0x64, 0x58, 0xc9, 0x87, 0x74, 0xdc, 0xe0, 0x5f, 0x2a,
	0x38, 0xbc, 0x81, 0x5e, 0x79, 0xd5, 0x6d, 0x3b, 0x90, 0x22, 0x5d, 0x48, 0x96, 0x63, 0xb3, 0x83,
	0xa6, 0x2e, 0x9d, 0x08, 0x13, 0x6b, 0x95, 0x28, 0xeb, 0x36, 0x30, 0xa4, 0x03, 0x61, 0x68, 0x59,
	0x86, 0xef, 0x60, 0xd4, 0xbe, 0x28, 0x79, 0x01, 0x5e, 0x73, 0x53, 0xe3, 0xde, 0xbe, 0x43, 0x1f,
	0x80, 0xf3, 0x3f, 0x5d, 0x18, 0xdc, 0x54, 0x51, 0x25, 0x9f, 0xa1, 0x5f, 0xe5, 0x90, 0xf8, 0xed,
	0x30, 0xb5, 0xc3, 0x1a, 0x1c, 0x6d, 0x61, 0xea, 0xd0, 0xbe, 0x85, 0x41, 0x84, 0xd6, 0x59, 0x59,
	0x4f, 0x6c, 0xb0, 0x0e, 0xd4, 0x62, 0x77, 0xfb, 0xf5, 0xe4, 0x06, 0xeb, 0x00, 0xf9, 0x08, 0xa3,
	0x08, 0xed, 0xc3, 0x72, 0xb7, 0xe6, 0x2a, 0xd8, 0x8a, 0x92, 0xf7, 0xe0, 0x45, 0x68, 0xeb, 0xd3,
	0x6d, 0xe6, 0x37, 0xd8, 0x84, 0xc8, 0x15, 0x8c, 0x23, 0xb4, 0xff, 0x2d, 0xf1, 0xb1, 0xef, 0x25,
	0x78, 0x8c, 0xb8, 0x7c, 0xf5, 0xe3, 0x78, 0x2e, 0xec, 0xdd, 0x32, 0x99, 0xa4, 0x2a, 0x9f, 0xd2,
	0x33, 0x76, 0xc6, 0x85, 0x9a, 0xfe, 0x62, 0xd9, 0xe2, 0x5e, 0x0b, 0x9c, 0xea, 0x22, 0x4d, 0xfa,
	0xee, 0xdf, 0x70, 0xf1, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xd7, 0x5b, 0xae, 0x30, 0x04, 0x00,
	0x00,
}
