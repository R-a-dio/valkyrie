// Code generated by protoc-gen-twirp v5.5.0, DO NOT EDIT.
// source: radio.proto

/*
Package rpc is a generated twirp stub package.
This code was generated with github.com/twitchtv/twirp/protoc-gen-twirp v5.5.0.

It is generated from these files:
	radio.proto
*/
package rpc

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf2 "github.com/golang/protobuf/ptypes/wrappers"

// Imports only used by utility functions:
import io "io"
import strconv "strconv"
import json "encoding/json"
import url "net/url"

// =================
// Manager Interface
// =================

type Manager interface {
	// Status returns the current status
	Status(context.Context, *google_protobuf1.Empty) (*StatusResponse, error)

	SetUser(context.Context, *UserUpdate) (*google_protobuf1.Empty, error)

	SetSong(context.Context, *SongUpdate) (*google_protobuf1.Empty, error)

	SetStreamerConfig(context.Context, *StreamerConfig) (*google_protobuf1.Empty, error)

	SetThread(context.Context, *google_protobuf2.StringValue) (*google_protobuf1.Empty, error)

	SetListenerInfo(context.Context, *ListenerInfo) (*google_protobuf1.Empty, error)
}

// =======================
// Manager Protobuf Client
// =======================

type managerProtobufClient struct {
	client HTTPClient
	urls   [6]string
}

// NewManagerProtobufClient creates a Protobuf client that implements the Manager interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewManagerProtobufClient(addr string, client HTTPClient) Manager {
	prefix := urlBase(addr) + ManagerPathPrefix
	urls := [6]string{
		prefix + "Status",
		prefix + "SetUser",
		prefix + "SetSong",
		prefix + "SetStreamerConfig",
		prefix + "SetThread",
		prefix + "SetListenerInfo",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &managerProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &managerProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *managerProtobufClient) Status(ctx context.Context, in *google_protobuf1.Empty) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "Status")
	out := new(StatusResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerProtobufClient) SetUser(ctx context.Context, in *UserUpdate) (*google_protobuf1.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "SetUser")
	out := new(google_protobuf1.Empty)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerProtobufClient) SetSong(ctx context.Context, in *SongUpdate) (*google_protobuf1.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "SetSong")
	out := new(google_protobuf1.Empty)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerProtobufClient) SetStreamerConfig(ctx context.Context, in *StreamerConfig) (*google_protobuf1.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "SetStreamerConfig")
	out := new(google_protobuf1.Empty)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerProtobufClient) SetThread(ctx context.Context, in *google_protobuf2.StringValue) (*google_protobuf1.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "SetThread")
	out := new(google_protobuf1.Empty)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerProtobufClient) SetListenerInfo(ctx context.Context, in *ListenerInfo) (*google_protobuf1.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "SetListenerInfo")
	out := new(google_protobuf1.Empty)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===================
// Manager JSON Client
// ===================

type managerJSONClient struct {
	client HTTPClient
	urls   [6]string
}

// NewManagerJSONClient creates a JSON client that implements the Manager interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewManagerJSONClient(addr string, client HTTPClient) Manager {
	prefix := urlBase(addr) + ManagerPathPrefix
	urls := [6]string{
		prefix + "Status",
		prefix + "SetUser",
		prefix + "SetSong",
		prefix + "SetStreamerConfig",
		prefix + "SetThread",
		prefix + "SetListenerInfo",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &managerJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &managerJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *managerJSONClient) Status(ctx context.Context, in *google_protobuf1.Empty) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "Status")
	out := new(StatusResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerJSONClient) SetUser(ctx context.Context, in *UserUpdate) (*google_protobuf1.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "SetUser")
	out := new(google_protobuf1.Empty)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerJSONClient) SetSong(ctx context.Context, in *SongUpdate) (*google_protobuf1.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "SetSong")
	out := new(google_protobuf1.Empty)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerJSONClient) SetStreamerConfig(ctx context.Context, in *StreamerConfig) (*google_protobuf1.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "SetStreamerConfig")
	out := new(google_protobuf1.Empty)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerJSONClient) SetThread(ctx context.Context, in *google_protobuf2.StringValue) (*google_protobuf1.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "SetThread")
	out := new(google_protobuf1.Empty)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerJSONClient) SetListenerInfo(ctx context.Context, in *ListenerInfo) (*google_protobuf1.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithMethodName(ctx, "SetListenerInfo")
	out := new(google_protobuf1.Empty)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ======================
// Manager Server Handler
// ======================

type managerServer struct {
	Manager
	hooks *twirp.ServerHooks
}

func NewManagerServer(svc Manager, hooks *twirp.ServerHooks) TwirpServer {
	return &managerServer{
		Manager: svc,
		hooks:   hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *managerServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// ManagerPathPrefix is used for all URL paths on a twirp Manager server.
// Requests are always: POST ManagerPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const ManagerPathPrefix = "/twirp/radio.Manager/"

func (s *managerServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Manager")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/radio.Manager/Status":
		s.serveStatus(ctx, resp, req)
		return
	case "/twirp/radio.Manager/SetUser":
		s.serveSetUser(ctx, resp, req)
		return
	case "/twirp/radio.Manager/SetSong":
		s.serveSetSong(ctx, resp, req)
		return
	case "/twirp/radio.Manager/SetStreamerConfig":
		s.serveSetStreamerConfig(ctx, resp, req)
		return
	case "/twirp/radio.Manager/SetThread":
		s.serveSetThread(ctx, resp, req)
		return
	case "/twirp/radio.Manager/SetListenerInfo":
		s.serveSetListenerInfo(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *managerServer) serveStatus(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveStatusJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveStatusProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *managerServer) serveStatusJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Status")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(google_protobuf1.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.Status(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling Status. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveStatusProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Status")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(google_protobuf1.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.Status(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling Status. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveSetUser(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetUserJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetUserProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *managerServer) serveSetUserJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UserUpdate)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *google_protobuf1.Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.SetUser(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf1.Empty and nil error while calling SetUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveSetUserProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(UserUpdate)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *google_protobuf1.Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.SetUser(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf1.Empty and nil error while calling SetUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveSetSong(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetSongJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetSongProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *managerServer) serveSetSongJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetSong")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(SongUpdate)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *google_protobuf1.Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.SetSong(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf1.Empty and nil error while calling SetSong. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveSetSongProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetSong")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(SongUpdate)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *google_protobuf1.Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.SetSong(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf1.Empty and nil error while calling SetSong. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveSetStreamerConfig(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetStreamerConfigJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetStreamerConfigProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *managerServer) serveSetStreamerConfigJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetStreamerConfig")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(StreamerConfig)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *google_protobuf1.Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.SetStreamerConfig(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf1.Empty and nil error while calling SetStreamerConfig. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveSetStreamerConfigProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetStreamerConfig")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(StreamerConfig)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *google_protobuf1.Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.SetStreamerConfig(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf1.Empty and nil error while calling SetStreamerConfig. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveSetThread(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetThreadJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetThreadProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *managerServer) serveSetThreadJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetThread")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(google_protobuf2.StringValue)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *google_protobuf1.Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.SetThread(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf1.Empty and nil error while calling SetThread. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveSetThreadProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetThread")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(google_protobuf2.StringValue)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *google_protobuf1.Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.SetThread(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf1.Empty and nil error while calling SetThread. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveSetListenerInfo(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetListenerInfoJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetListenerInfoProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *managerServer) serveSetListenerInfoJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetListenerInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ListenerInfo)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *google_protobuf1.Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.SetListenerInfo(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf1.Empty and nil error while calling SetListenerInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) serveSetListenerInfoProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetListenerInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(ListenerInfo)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *google_protobuf1.Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Manager.SetListenerInfo(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf1.Empty and nil error while calling SetListenerInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *managerServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 0
}

func (s *managerServer) ProtocGenTwirpVersion() string {
	return "v5.5.0"
}

// ===================
// Announcer Interface
// ===================

type Announcer interface {
	AnnounceSong(context.Context, *SongAnnouncement) (*google_protobuf1.Empty, error)

	AnnounceRequest(context.Context, *SongRequestAnnouncement) (*google_protobuf1.Empty, error)
}

// =========================
// Announcer Protobuf Client
// =========================

type announcerProtobufClient struct {
	client HTTPClient
	urls   [2]string
}

// NewAnnouncerProtobufClient creates a Protobuf client that implements the Announcer interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewAnnouncerProtobufClient(addr string, client HTTPClient) Announcer {
	prefix := urlBase(addr) + AnnouncerPathPrefix
	urls := [2]string{
		prefix + "AnnounceSong",
		prefix + "AnnounceRequest",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &announcerProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &announcerProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *announcerProtobufClient) AnnounceSong(ctx context.Context, in *SongAnnouncement) (*google_protobuf1.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Announcer")
	ctx = ctxsetters.WithMethodName(ctx, "AnnounceSong")
	out := new(google_protobuf1.Empty)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcerProtobufClient) AnnounceRequest(ctx context.Context, in *SongRequestAnnouncement) (*google_protobuf1.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Announcer")
	ctx = ctxsetters.WithMethodName(ctx, "AnnounceRequest")
	out := new(google_protobuf1.Empty)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =====================
// Announcer JSON Client
// =====================

type announcerJSONClient struct {
	client HTTPClient
	urls   [2]string
}

// NewAnnouncerJSONClient creates a JSON client that implements the Announcer interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewAnnouncerJSONClient(addr string, client HTTPClient) Announcer {
	prefix := urlBase(addr) + AnnouncerPathPrefix
	urls := [2]string{
		prefix + "AnnounceSong",
		prefix + "AnnounceRequest",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &announcerJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &announcerJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *announcerJSONClient) AnnounceSong(ctx context.Context, in *SongAnnouncement) (*google_protobuf1.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Announcer")
	ctx = ctxsetters.WithMethodName(ctx, "AnnounceSong")
	out := new(google_protobuf1.Empty)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcerJSONClient) AnnounceRequest(ctx context.Context, in *SongRequestAnnouncement) (*google_protobuf1.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Announcer")
	ctx = ctxsetters.WithMethodName(ctx, "AnnounceRequest")
	out := new(google_protobuf1.Empty)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ========================
// Announcer Server Handler
// ========================

type announcerServer struct {
	Announcer
	hooks *twirp.ServerHooks
}

func NewAnnouncerServer(svc Announcer, hooks *twirp.ServerHooks) TwirpServer {
	return &announcerServer{
		Announcer: svc,
		hooks:     hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *announcerServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// AnnouncerPathPrefix is used for all URL paths on a twirp Announcer server.
// Requests are always: POST AnnouncerPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const AnnouncerPathPrefix = "/twirp/radio.Announcer/"

func (s *announcerServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Announcer")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/radio.Announcer/AnnounceSong":
		s.serveAnnounceSong(ctx, resp, req)
		return
	case "/twirp/radio.Announcer/AnnounceRequest":
		s.serveAnnounceRequest(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *announcerServer) serveAnnounceSong(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAnnounceSongJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAnnounceSongProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *announcerServer) serveAnnounceSongJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AnnounceSong")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(SongAnnouncement)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *google_protobuf1.Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Announcer.AnnounceSong(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf1.Empty and nil error while calling AnnounceSong. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *announcerServer) serveAnnounceSongProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AnnounceSong")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(SongAnnouncement)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *google_protobuf1.Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Announcer.AnnounceSong(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf1.Empty and nil error while calling AnnounceSong. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *announcerServer) serveAnnounceRequest(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAnnounceRequestJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAnnounceRequestProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *announcerServer) serveAnnounceRequestJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AnnounceRequest")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(SongRequestAnnouncement)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *google_protobuf1.Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Announcer.AnnounceRequest(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf1.Empty and nil error while calling AnnounceRequest. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *announcerServer) serveAnnounceRequestProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AnnounceRequest")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(SongRequestAnnouncement)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *google_protobuf1.Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Announcer.AnnounceRequest(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf1.Empty and nil error while calling AnnounceRequest. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *announcerServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 1
}

func (s *announcerServer) ProtocGenTwirpVersion() string {
	return "v5.5.0"
}

// ==================
// Streamer Interface
// ==================

type Streamer interface {
	// Start starts the streamer
	Start(context.Context, *google_protobuf1.Empty) (*StreamerResponse, error)

	// Stop stops the streamer, the boolean argument indicates if we should stop
	// right away, or wait until the current song ends
	Stop(context.Context, *google_protobuf2.BoolValue) (*StreamerResponse, error)

	// RequestSong requests a song to be played by the streamer
	RequestSong(context.Context, *SongRequest) (*RequestResponse, error)

	// SetConfig changes the configuration of the streamer
	SetConfig(context.Context, *StreamerConfig) (*google_protobuf1.Empty, error)

	// Queue returns the current queue contents of the streamer
	Queue(context.Context, *google_protobuf1.Empty) (*QueueInfo, error)
}

// ========================
// Streamer Protobuf Client
// ========================

type streamerProtobufClient struct {
	client HTTPClient
	urls   [5]string
}

// NewStreamerProtobufClient creates a Protobuf client that implements the Streamer interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewStreamerProtobufClient(addr string, client HTTPClient) Streamer {
	prefix := urlBase(addr) + StreamerPathPrefix
	urls := [5]string{
		prefix + "Start",
		prefix + "Stop",
		prefix + "RequestSong",
		prefix + "SetConfig",
		prefix + "Queue",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &streamerProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &streamerProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *streamerProtobufClient) Start(ctx context.Context, in *google_protobuf1.Empty) (*StreamerResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Streamer")
	ctx = ctxsetters.WithMethodName(ctx, "Start")
	out := new(StreamerResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerProtobufClient) Stop(ctx context.Context, in *google_protobuf2.BoolValue) (*StreamerResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Streamer")
	ctx = ctxsetters.WithMethodName(ctx, "Stop")
	out := new(StreamerResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerProtobufClient) RequestSong(ctx context.Context, in *SongRequest) (*RequestResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Streamer")
	ctx = ctxsetters.WithMethodName(ctx, "RequestSong")
	out := new(RequestResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerProtobufClient) SetConfig(ctx context.Context, in *StreamerConfig) (*google_protobuf1.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Streamer")
	ctx = ctxsetters.WithMethodName(ctx, "SetConfig")
	out := new(google_protobuf1.Empty)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerProtobufClient) Queue(ctx context.Context, in *google_protobuf1.Empty) (*QueueInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Streamer")
	ctx = ctxsetters.WithMethodName(ctx, "Queue")
	out := new(QueueInfo)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ====================
// Streamer JSON Client
// ====================

type streamerJSONClient struct {
	client HTTPClient
	urls   [5]string
}

// NewStreamerJSONClient creates a JSON client that implements the Streamer interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewStreamerJSONClient(addr string, client HTTPClient) Streamer {
	prefix := urlBase(addr) + StreamerPathPrefix
	urls := [5]string{
		prefix + "Start",
		prefix + "Stop",
		prefix + "RequestSong",
		prefix + "SetConfig",
		prefix + "Queue",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &streamerJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &streamerJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *streamerJSONClient) Start(ctx context.Context, in *google_protobuf1.Empty) (*StreamerResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Streamer")
	ctx = ctxsetters.WithMethodName(ctx, "Start")
	out := new(StreamerResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerJSONClient) Stop(ctx context.Context, in *google_protobuf2.BoolValue) (*StreamerResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Streamer")
	ctx = ctxsetters.WithMethodName(ctx, "Stop")
	out := new(StreamerResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerJSONClient) RequestSong(ctx context.Context, in *SongRequest) (*RequestResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Streamer")
	ctx = ctxsetters.WithMethodName(ctx, "RequestSong")
	out := new(RequestResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerJSONClient) SetConfig(ctx context.Context, in *StreamerConfig) (*google_protobuf1.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Streamer")
	ctx = ctxsetters.WithMethodName(ctx, "SetConfig")
	out := new(google_protobuf1.Empty)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerJSONClient) Queue(ctx context.Context, in *google_protobuf1.Empty) (*QueueInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Streamer")
	ctx = ctxsetters.WithMethodName(ctx, "Queue")
	out := new(QueueInfo)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =======================
// Streamer Server Handler
// =======================

type streamerServer struct {
	Streamer
	hooks *twirp.ServerHooks
}

func NewStreamerServer(svc Streamer, hooks *twirp.ServerHooks) TwirpServer {
	return &streamerServer{
		Streamer: svc,
		hooks:    hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *streamerServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// StreamerPathPrefix is used for all URL paths on a twirp Streamer server.
// Requests are always: POST StreamerPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const StreamerPathPrefix = "/twirp/radio.Streamer/"

func (s *streamerServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Streamer")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/radio.Streamer/Start":
		s.serveStart(ctx, resp, req)
		return
	case "/twirp/radio.Streamer/Stop":
		s.serveStop(ctx, resp, req)
		return
	case "/twirp/radio.Streamer/RequestSong":
		s.serveRequestSong(ctx, resp, req)
		return
	case "/twirp/radio.Streamer/SetConfig":
		s.serveSetConfig(ctx, resp, req)
		return
	case "/twirp/radio.Streamer/Queue":
		s.serveQueue(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *streamerServer) serveStart(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveStartJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveStartProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *streamerServer) serveStartJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Start")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(google_protobuf1.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *StreamerResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Streamer.Start(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StreamerResponse and nil error while calling Start. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *streamerServer) serveStartProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Start")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(google_protobuf1.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *StreamerResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Streamer.Start(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StreamerResponse and nil error while calling Start. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *streamerServer) serveStop(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveStopJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveStopProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *streamerServer) serveStopJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Stop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(google_protobuf2.BoolValue)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *StreamerResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Streamer.Stop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StreamerResponse and nil error while calling Stop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *streamerServer) serveStopProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Stop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(google_protobuf2.BoolValue)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *StreamerResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Streamer.Stop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StreamerResponse and nil error while calling Stop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *streamerServer) serveRequestSong(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRequestSongJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRequestSongProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *streamerServer) serveRequestSongJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RequestSong")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(SongRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *RequestResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Streamer.RequestSong(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RequestResponse and nil error while calling RequestSong. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *streamerServer) serveRequestSongProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RequestSong")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(SongRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *RequestResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Streamer.RequestSong(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RequestResponse and nil error while calling RequestSong. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *streamerServer) serveSetConfig(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetConfigJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetConfigProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *streamerServer) serveSetConfigJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetConfig")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(StreamerConfig)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *google_protobuf1.Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Streamer.SetConfig(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf1.Empty and nil error while calling SetConfig. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *streamerServer) serveSetConfigProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetConfig")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(StreamerConfig)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *google_protobuf1.Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Streamer.SetConfig(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf1.Empty and nil error while calling SetConfig. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *streamerServer) serveQueue(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveQueueJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveQueueProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *streamerServer) serveQueueJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Queue")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(google_protobuf1.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *QueueInfo
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Streamer.Queue(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *QueueInfo and nil error while calling Queue. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *streamerServer) serveQueueProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Queue")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(google_protobuf1.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *QueueInfo
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Streamer.Queue(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *QueueInfo and nil error while calling Queue. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *streamerServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 2
}

func (s *streamerServer) ProtocGenTwirpVersion() string {
	return "v5.5.0"
}

// ===============
// Queue Interface
// ===============

// Queue is documented under the radio.QueueService interface in the Go package
type Queue interface {
	AddRequest(context.Context, *QueueEntry) (*google_protobuf1.Empty, error)

	ReserveNext(context.Context, *google_protobuf1.Empty) (*QueueEntry, error)

	Remove(context.Context, *QueueEntry) (*google_protobuf2.BoolValue, error)

	Entries(context.Context, *google_protobuf1.Empty) (*QueueInfo, error)
}

// =====================
// Queue Protobuf Client
// =====================

type queueProtobufClient struct {
	client HTTPClient
	urls   [4]string
}

// NewQueueProtobufClient creates a Protobuf client that implements the Queue interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewQueueProtobufClient(addr string, client HTTPClient) Queue {
	prefix := urlBase(addr) + QueuePathPrefix
	urls := [4]string{
		prefix + "AddRequest",
		prefix + "ReserveNext",
		prefix + "Remove",
		prefix + "Entries",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &queueProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &queueProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *queueProtobufClient) AddRequest(ctx context.Context, in *QueueEntry) (*google_protobuf1.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Queue")
	ctx = ctxsetters.WithMethodName(ctx, "AddRequest")
	out := new(google_protobuf1.Empty)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueProtobufClient) ReserveNext(ctx context.Context, in *google_protobuf1.Empty) (*QueueEntry, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Queue")
	ctx = ctxsetters.WithMethodName(ctx, "ReserveNext")
	out := new(QueueEntry)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueProtobufClient) Remove(ctx context.Context, in *QueueEntry) (*google_protobuf2.BoolValue, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Queue")
	ctx = ctxsetters.WithMethodName(ctx, "Remove")
	out := new(google_protobuf2.BoolValue)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueProtobufClient) Entries(ctx context.Context, in *google_protobuf1.Empty) (*QueueInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Queue")
	ctx = ctxsetters.WithMethodName(ctx, "Entries")
	out := new(QueueInfo)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =================
// Queue JSON Client
// =================

type queueJSONClient struct {
	client HTTPClient
	urls   [4]string
}

// NewQueueJSONClient creates a JSON client that implements the Queue interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewQueueJSONClient(addr string, client HTTPClient) Queue {
	prefix := urlBase(addr) + QueuePathPrefix
	urls := [4]string{
		prefix + "AddRequest",
		prefix + "ReserveNext",
		prefix + "Remove",
		prefix + "Entries",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &queueJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &queueJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *queueJSONClient) AddRequest(ctx context.Context, in *QueueEntry) (*google_protobuf1.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Queue")
	ctx = ctxsetters.WithMethodName(ctx, "AddRequest")
	out := new(google_protobuf1.Empty)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueJSONClient) ReserveNext(ctx context.Context, in *google_protobuf1.Empty) (*QueueEntry, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Queue")
	ctx = ctxsetters.WithMethodName(ctx, "ReserveNext")
	out := new(QueueEntry)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueJSONClient) Remove(ctx context.Context, in *QueueEntry) (*google_protobuf2.BoolValue, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Queue")
	ctx = ctxsetters.WithMethodName(ctx, "Remove")
	out := new(google_protobuf2.BoolValue)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueJSONClient) Entries(ctx context.Context, in *google_protobuf1.Empty) (*QueueInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Queue")
	ctx = ctxsetters.WithMethodName(ctx, "Entries")
	out := new(QueueInfo)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ====================
// Queue Server Handler
// ====================

type queueServer struct {
	Queue
	hooks *twirp.ServerHooks
}

func NewQueueServer(svc Queue, hooks *twirp.ServerHooks) TwirpServer {
	return &queueServer{
		Queue: svc,
		hooks: hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *queueServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// QueuePathPrefix is used for all URL paths on a twirp Queue server.
// Requests are always: POST QueuePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const QueuePathPrefix = "/twirp/radio.Queue/"

func (s *queueServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "radio")
	ctx = ctxsetters.WithServiceName(ctx, "Queue")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/radio.Queue/AddRequest":
		s.serveAddRequest(ctx, resp, req)
		return
	case "/twirp/radio.Queue/ReserveNext":
		s.serveReserveNext(ctx, resp, req)
		return
	case "/twirp/radio.Queue/Remove":
		s.serveRemove(ctx, resp, req)
		return
	case "/twirp/radio.Queue/Entries":
		s.serveEntries(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *queueServer) serveAddRequest(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAddRequestJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAddRequestProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *queueServer) serveAddRequestJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddRequest")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(QueueEntry)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *google_protobuf1.Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Queue.AddRequest(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf1.Empty and nil error while calling AddRequest. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *queueServer) serveAddRequestProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddRequest")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(QueueEntry)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *google_protobuf1.Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Queue.AddRequest(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf1.Empty and nil error while calling AddRequest. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *queueServer) serveReserveNext(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReserveNextJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReserveNextProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *queueServer) serveReserveNextJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReserveNext")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(google_protobuf1.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *QueueEntry
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Queue.ReserveNext(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *QueueEntry and nil error while calling ReserveNext. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *queueServer) serveReserveNextProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReserveNext")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(google_protobuf1.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *QueueEntry
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Queue.ReserveNext(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *QueueEntry and nil error while calling ReserveNext. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *queueServer) serveRemove(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRemoveJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoveProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *queueServer) serveRemoveJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Remove")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(QueueEntry)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *google_protobuf2.BoolValue
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Queue.Remove(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf2.BoolValue and nil error while calling Remove. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *queueServer) serveRemoveProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Remove")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(QueueEntry)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *google_protobuf2.BoolValue
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Queue.Remove(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf2.BoolValue and nil error while calling Remove. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *queueServer) serveEntries(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveEntriesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveEntriesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *queueServer) serveEntriesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Entries")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(google_protobuf1.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *QueueInfo
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Queue.Entries(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *QueueInfo and nil error while calling Entries. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *queueServer) serveEntriesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Entries")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(google_protobuf1.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *QueueInfo
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Queue.Entries(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *QueueInfo and nil error while calling Entries. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *queueServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 3
}

func (s *queueServer) ProtocGenTwirpVersion() string {
	return "v5.5.0"
}

// =====
// Utils
// =====

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
//
// HTTPClient implementations should not follow redirects. Redirects are
// automatically disabled if *(net/http).Client is passed to client
// constructors. See the withoutRedirects function in this file for more
// details.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// TwirpServer is the interface generated server structs will support: they're
// HTTP handlers with additional methods for accessing metadata about the
// service. Those accessors are a low-level API for building reflection tools.
// Most people can think of TwirpServers as just http.Handlers.
type TwirpServer interface {
	http.Handler
	// ServiceDescriptor returns gzipped bytes describing the .proto file that
	// this service was generated from. Once unzipped, the bytes can be
	// unmarshalled as a
	// github.com/golang/protobuf/protoc-gen-go/descriptor.FileDescriptorProto.
	//
	// The returned integer is the index of this particular service within that
	// FileDescriptorProto's 'Service' slice of ServiceDescriptorProtos. This is a
	// low-level field, expected to be used for reflection.
	ServiceDescriptor() ([]byte, int)
	// ProtocGenTwirpVersion is the semantic version string of the version of
	// twirp used to generate this file.
	ProtocGenTwirpVersion() string
}

// WriteError writes an HTTP response with a valid Twirp error format.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func WriteError(resp http.ResponseWriter, err error) {
	writeError(context.Background(), resp, err, nil)
}

// writeError writes Twirp errors in the response and triggers hooks.
func writeError(ctx context.Context, resp http.ResponseWriter, err error, hooks *twirp.ServerHooks) {
	// Non-twirp errors are wrapped as Internal (default)
	twerr, ok := err.(twirp.Error)
	if !ok {
		twerr = twirp.InternalErrorWith(err)
	}

	statusCode := twirp.ServerHTTPStatusFromErrorCode(twerr.Code())
	ctx = ctxsetters.WithStatusCode(ctx, statusCode)
	ctx = callError(ctx, hooks, twerr)

	resp.Header().Set("Content-Type", "application/json") // Error responses are always JSON (instead of protobuf)
	resp.WriteHeader(statusCode)                          // HTTP response status code

	respBody := marshalErrorToJSON(twerr)
	_, writeErr := resp.Write(respBody)
	if writeErr != nil {
		// We have three options here. We could log the error, call the Error
		// hook, or just silently ignore the error.
		//
		// Logging is unacceptable because we don't have a user-controlled
		// logger; writing out to stderr without permission is too rude.
		//
		// Calling the Error hook would confuse users: it would mean the Error
		// hook got called twice for one request, which is likely to lead to
		// duplicated log messages and metrics, no matter how well we document
		// the behavior.
		//
		// Silently ignoring the error is our least-bad option. It's highly
		// likely that the connection is broken and the original 'err' says
		// so anyway.
		_ = writeErr
	}

	callResponseSent(ctx, hooks)
}

// urlBase helps ensure that addr specifies a scheme. If it is unparsable
// as a URL, it returns addr unchanged.
func urlBase(addr string) string {
	// If the addr specifies a scheme, use it. If not, default to
	// http. If url.Parse fails on it, return it unchanged.
	url, err := url.Parse(addr)
	if err != nil {
		return addr
	}
	if url.Scheme == "" {
		url.Scheme = "http"
	}
	return url.String()
}

// getCustomHTTPReqHeaders retrieves a copy of any headers that are set in
// a context through the twirp.WithHTTPRequestHeaders function.
// If there are no headers set, or if they have the wrong type, nil is returned.
func getCustomHTTPReqHeaders(ctx context.Context) http.Header {
	header, ok := twirp.HTTPRequestHeaders(ctx)
	if !ok || header == nil {
		return nil
	}
	copied := make(http.Header)
	for k, vv := range header {
		if vv == nil {
			copied[k] = nil
			continue
		}
		copied[k] = make([]string, len(vv))
		copy(copied[k], vv)
	}
	return copied
}

// newRequest makes an http.Request from a client, adding common headers.
func newRequest(ctx context.Context, url string, reqBody io.Reader, contentType string) (*http.Request, error) {
	req, err := http.NewRequest("POST", url, reqBody)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if customHeader := getCustomHTTPReqHeaders(ctx); customHeader != nil {
		req.Header = customHeader
	}
	req.Header.Set("Accept", contentType)
	req.Header.Set("Content-Type", contentType)
	req.Header.Set("Twirp-Version", "v5.5.0")
	return req, nil
}

// JSON serialization for errors
type twerrJSON struct {
	Code string            `json:"code"`
	Msg  string            `json:"msg"`
	Meta map[string]string `json:"meta,omitempty"`
}

// marshalErrorToJSON returns JSON from a twirp.Error, that can be used as HTTP error response body.
// If serialization fails, it will use a descriptive Internal error instead.
func marshalErrorToJSON(twerr twirp.Error) []byte {
	// make sure that msg is not too large
	msg := twerr.Msg()
	if len(msg) > 1e6 {
		msg = msg[:1e6]
	}

	tj := twerrJSON{
		Code: string(twerr.Code()),
		Msg:  msg,
		Meta: twerr.MetaMap(),
	}

	buf, err := json.Marshal(&tj)
	if err != nil {
		buf = []byte("{\"type\": \"" + twirp.Internal + "\", \"msg\": \"There was an error but it could not be serialized into JSON\"}") // fallback
	}

	return buf
}

// errorFromResponse builds a twirp.Error from a non-200 HTTP response.
// If the response has a valid serialized Twirp error, then it's returned.
// If not, the response status code is used to generate a similar twirp
// error. See twirpErrorFromIntermediary for more info on intermediary errors.
func errorFromResponse(resp *http.Response) twirp.Error {
	statusCode := resp.StatusCode
	statusText := http.StatusText(statusCode)

	if isHTTPRedirect(statusCode) {
		// Unexpected redirect: it must be an error from an intermediary.
		// Twirp clients don't follow redirects automatically, Twirp only handles
		// POST requests, redirects should only happen on GET and HEAD requests.
		location := resp.Header.Get("Location")
		msg := fmt.Sprintf("unexpected HTTP status code %d %q received, Location=%q", statusCode, statusText, location)
		return twirpErrorFromIntermediary(statusCode, msg, location)
	}

	respBodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return clientError("failed to read server error response body", err)
	}
	var tj twerrJSON
	if err := json.Unmarshal(respBodyBytes, &tj); err != nil {
		// Invalid JSON response; it must be an error from an intermediary.
		msg := fmt.Sprintf("Error from intermediary with HTTP status code %d %q", statusCode, statusText)
		return twirpErrorFromIntermediary(statusCode, msg, string(respBodyBytes))
	}

	errorCode := twirp.ErrorCode(tj.Code)
	if !twirp.IsValidErrorCode(errorCode) {
		msg := "invalid type returned from server error response: " + tj.Code
		return twirp.InternalError(msg)
	}

	twerr := twirp.NewError(errorCode, tj.Msg)
	for k, v := range tj.Meta {
		twerr = twerr.WithMeta(k, v)
	}
	return twerr
}

// twirpErrorFromIntermediary maps HTTP errors from non-twirp sources to twirp errors.
// The mapping is similar to gRPC: https://github.com/grpc/grpc/blob/master/doc/http-grpc-status-mapping.md.
// Returned twirp Errors have some additional metadata for inspection.
func twirpErrorFromIntermediary(status int, msg string, bodyOrLocation string) twirp.Error {
	var code twirp.ErrorCode
	if isHTTPRedirect(status) { // 3xx
		code = twirp.Internal
	} else {
		switch status {
		case 400: // Bad Request
			code = twirp.Internal
		case 401: // Unauthorized
			code = twirp.Unauthenticated
		case 403: // Forbidden
			code = twirp.PermissionDenied
		case 404: // Not Found
			code = twirp.BadRoute
		case 429, 502, 503, 504: // Too Many Requests, Bad Gateway, Service Unavailable, Gateway Timeout
			code = twirp.Unavailable
		default: // All other codes
			code = twirp.Unknown
		}
	}

	twerr := twirp.NewError(code, msg)
	twerr = twerr.WithMeta("http_error_from_intermediary", "true") // to easily know if this error was from intermediary
	twerr = twerr.WithMeta("status_code", strconv.Itoa(status))
	if isHTTPRedirect(status) {
		twerr = twerr.WithMeta("location", bodyOrLocation)
	} else {
		twerr = twerr.WithMeta("body", bodyOrLocation)
	}
	return twerr
}
func isHTTPRedirect(status int) bool {
	return status >= 300 && status <= 399
}

// wrappedError implements the github.com/pkg/errors.Causer interface, allowing errors to be
// examined for their root cause.
type wrappedError struct {
	msg   string
	cause error
}

func wrapErr(err error, msg string) error { return &wrappedError{msg: msg, cause: err} }
func (e *wrappedError) Cause() error      { return e.cause }
func (e *wrappedError) Error() string     { return e.msg + ": " + e.cause.Error() }

// clientError adds consistency to errors generated in the client
func clientError(desc string, err error) twirp.Error {
	return twirp.InternalErrorWith(wrapErr(err, desc))
}

// badRouteError is used when the twirp server cannot route a request
func badRouteError(msg string, method, url string) twirp.Error {
	err := twirp.NewError(twirp.BadRoute, msg)
	err = err.WithMeta("twirp_invalid_route", method+" "+url)
	return err
}

// The standard library will, by default, redirect requests (including POSTs) if it gets a 302 or
// 303 response, and also 301s in go1.8. It redirects by making a second request, changing the
// method to GET and removing the body. This produces very confusing error messages, so instead we
// set a redirect policy that always errors. This stops Go from executing the redirect.
//
// We have to be a little careful in case the user-provided http.Client has its own CheckRedirect
// policy - if so, we'll run through that policy first.
//
// Because this requires modifying the http.Client, we make a new copy of the client and return it.
func withoutRedirects(in *http.Client) *http.Client {
	copy := *in
	copy.CheckRedirect = func(req *http.Request, via []*http.Request) error {
		if in.CheckRedirect != nil {
			// Run the input's redirect if it exists, in case it has side effects, but ignore any error it
			// returns, since we want to use ErrUseLastResponse.
			err := in.CheckRedirect(req, via)
			_ = err // Silly, but this makes sure generated code passes errcheck -blank, which some people use.
		}
		return http.ErrUseLastResponse
	}
	return &copy
}

// doProtobufRequest is common code to make a request to the remote twirp service.
func doProtobufRequest(ctx context.Context, client HTTPClient, url string, in, out proto.Message) (err error) {
	reqBodyBytes, err := proto.Marshal(in)
	if err != nil {
		return clientError("failed to marshal proto request", err)
	}
	reqBody := bytes.NewBuffer(reqBodyBytes)
	if err = ctx.Err(); err != nil {
		return clientError("aborted because context was done", err)
	}

	req, err := newRequest(ctx, url, reqBody, "application/protobuf")
	if err != nil {
		return clientError("could not build request", err)
	}
	resp, err := client.Do(req)
	if err != nil {
		return clientError("failed to do request", err)
	}

	defer func() {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = clientError("failed to close response body", cerr)
		}
	}()

	if err = ctx.Err(); err != nil {
		return clientError("aborted because context was done", err)
	}

	if resp.StatusCode != 200 {
		return errorFromResponse(resp)
	}

	respBodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return clientError("failed to read response body", err)
	}
	if err = ctx.Err(); err != nil {
		return clientError("aborted because context was done", err)
	}

	if err = proto.Unmarshal(respBodyBytes, out); err != nil {
		return clientError("failed to unmarshal proto response", err)
	}
	return nil
}

// doJSONRequest is common code to make a request to the remote twirp service.
func doJSONRequest(ctx context.Context, client HTTPClient, url string, in, out proto.Message) (err error) {
	reqBody := bytes.NewBuffer(nil)
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(reqBody, in); err != nil {
		return clientError("failed to marshal json request", err)
	}
	if err = ctx.Err(); err != nil {
		return clientError("aborted because context was done", err)
	}

	req, err := newRequest(ctx, url, reqBody, "application/json")
	if err != nil {
		return clientError("could not build request", err)
	}
	resp, err := client.Do(req)
	if err != nil {
		return clientError("failed to do request", err)
	}

	defer func() {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = clientError("failed to close response body", cerr)
		}
	}()

	if err = ctx.Err(); err != nil {
		return clientError("aborted because context was done", err)
	}

	if resp.StatusCode != 200 {
		return errorFromResponse(resp)
	}

	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(resp.Body, out); err != nil {
		return clientError("failed to unmarshal json response", err)
	}
	if err = ctx.Err(); err != nil {
		return clientError("aborted because context was done", err)
	}
	return nil
}

// Call twirp.ServerHooks.RequestReceived if the hook is available
func callRequestReceived(ctx context.Context, h *twirp.ServerHooks) (context.Context, error) {
	if h == nil || h.RequestReceived == nil {
		return ctx, nil
	}
	return h.RequestReceived(ctx)
}

// Call twirp.ServerHooks.RequestRouted if the hook is available
func callRequestRouted(ctx context.Context, h *twirp.ServerHooks) (context.Context, error) {
	if h == nil || h.RequestRouted == nil {
		return ctx, nil
	}
	return h.RequestRouted(ctx)
}

// Call twirp.ServerHooks.ResponsePrepared if the hook is available
func callResponsePrepared(ctx context.Context, h *twirp.ServerHooks) context.Context {
	if h == nil || h.ResponsePrepared == nil {
		return ctx
	}
	return h.ResponsePrepared(ctx)
}

// Call twirp.ServerHooks.ResponseSent if the hook is available
func callResponseSent(ctx context.Context, h *twirp.ServerHooks) {
	if h == nil || h.ResponseSent == nil {
		return
	}
	h.ResponseSent(ctx)
}

// Call twirp.ServerHooks.Error if the hook is available
func callError(ctx context.Context, h *twirp.ServerHooks, err twirp.Error) context.Context {
	if h == nil || h.Error == nil {
		return ctx
	}
	return h.Error(ctx, err)
}

var twirpFileDescriptor0 = []byte{
	// 1563 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xef, 0x6e, 0x1b, 0xb9,
	0x11, 0x87, 0x64, 0xc9, 0xd2, 0x8e, 0x6c, 0xcb, 0x66, 0x72, 0xf6, 0x5a, 0x49, 0xcf, 0xbe, 0x3d,
	0xb4, 0x75, 0xd1, 0x9e, 0x8d, 0xf3, 0xf5, 0x9a, 0x5c, 0x02, 0xa4, 0x70, 0x62, 0x17, 0x70, 0x90,
	0x06, 0xe9, 0xca, 0x69, 0x81, 0x7c, 0x11, 0x68, 0xed, 0x48, 0x62, 0xbc, 0xff, 0x42, 0x72, 0x9d,
	0xf8, 0x35, 0xfa, 0xa5, 0xfd, 0xd2, 0x27, 0x28, 0xd0, 0x07, 0xe8, 0x23, 0xf4, 0x45, 0xda, 0x17,
	0xe8, 0xd7, 0xa2, 0xe0, 0x90, 0x2b, 0x4b, 0x96, 0x15, 0x25, 0x45, 0xbf, 0xed, 0x0c, 0xe7, 0x47,
	0x72, 0x7e, 0x33, 0xfc, 0x91, 0x0b, 0x2d, 0xc9, 0x23, 0x91, 0xed, 0xe7, 0x32, 0xd3, 0x19, 0xab,
	0x93, 0xd1, 0xf9, 0x72, 0x98, 0x65, 0xc3, 0x18, 0x0f, 0xc8, 0x79, 0x5e, 0x0c, 0x0e, 0xa2, 0x42,
	0x72, 0x2d, 0xb2, 0xd4, 0x86, 0x75, 0xee, 0xdd, 0x1c, 0xc7, 0x24, 0xd7, 0x57, 0x6e, 0x70, 0x06,
	0xfc, 0x5e, 0xf2, 0x3c, 0x47, 0xa9, 0xdc, 0xf8, 0xce, 0xcd, 0x71, 0x2d, 0x12, 0x54, 0x9a, 0x27,
	0xb9, 0x0d, 0x08, 0xfe, 0x5c, 0x87, 0x5a, 0x37, 0x4b, 0x87, 0x6c, 0x0d, 0xaa, 0x22, 0xf2, 0x2b,
	0xbb, 0x95, 0xbd, 0x7a, 0x58, 0x15, 0x11, 0x63, 0x50, 0x1b, 0x71, 0x35, 0xf2, 0xab, 0xbb, 0x95,
	0x3d, 0x2f, 0xa4, 0x6f, 0xd6, 0x81, 0x66, 0x82, 0x9a, 0x47, 0x5c, 0x73, 0x7f, 0x89, 0xfc, 0x63,
	0x9b, 0x7d, 0x0b, 0xcb, 0x31, 0xa6, 0x43, 0x3d, 0xf2, 0x6b, 0xbb, 0x95, 0xbd, 0xd6, 0xe1, 0xf6,
	0xbe, 0x5d, 0x7a, 0xbf, 0x5c, 0x7a, 0xff, 0xd8, 0xe5, 0x15, 0xba, 0x40, 0xf6, 0x18, 0x5a, 0x31,
	0x57, 0xba, 0x97, 0xc7, 0xfc, 0x0a, 0x23, 0xbf, 0x4e, 0xb8, 0xce, 0x0c, 0xee, 0xac, 0xdc, 0x72,
	0x08, 0x26, 0xfc, 0x15, 0x45, 0xb3, 0x6d, 0x68, 0x6a, 0xc9, 0xfb, 0x17, 0x3d, 0x11, 0xf9, 0xeb,
	0xb4, 0xeb, 0x06, 0xd9, 0xa7, 0x11, 0xdb, 0x84, 0x65, 0x2e, 0xb5, 0x50, 0xda, 0xdf, 0xa0, 0x4d,
	0x3a, 0x8b, 0xdd, 0x85, 0xba, 0x16, 0x3a, 0x46, 0x9f, 0x91, 0xdb, 0x1a, 0xc6, 0xcb, 0xe3, 0xf3,
	0x22, 0xf1, 0xef, 0x58, 0x2f, 0x19, 0xec, 0x1e, 0x78, 0x03, 0x11, 0x63, 0x2f, 0xe7, 0x7a, 0xe4,
	0xdf, 0xb5, 0xb9, 0x1a, 0xc7, 0x2b, 0xae, 0x47, 0x86, 0x1b, 0xcd, 0x87, 0xca, 0xff, 0xc2, 0x72,
	0x63, 0xbe, 0x0d, 0x37, 0xbc, 0xdf, 0xc7, 0x5c, 0x67, 0xd2, 0xdf, 0xb4, 0xf1, 0xa5, 0xcd, 0x76,
	0x5c, 0xa2, 0x18, 0x09, 0x33, 0xbc, 0x45, 0xc3, 0x94, 0xcc, 0x09, 0x79, 0x0c, 0x38, 0x97, 0x22,
	0x93, 0x42, 0x5f, 0xf9, 0x3e, 0x25, 0x33, 0xb6, 0x4d, 0x36, 0x85, 0xe2, 0xe7, 0x31, 0xfa, 0xdb,
	0xbb, 0x95, 0xbd, 0x66, 0xe8, 0x2c, 0x76, 0x04, 0x6b, 0x34, 0xa9, 0xc4, 0x77, 0x05, 0x2a, 0x8d,
	0x91, 0xdf, 0x59, 0x48, 0xe0, 0xaa, 0x41, 0x84, 0x25, 0x80, 0x7d, 0x0d, 0xab, 0x0e, 0xdd, 0xeb,
	0x67, 0x45, 0xaa, 0xfd, 0x7b, 0xb4, 0xf6, 0x8a, 0x73, 0x3e, 0x33, 0x3e, 0xf6, 0xe4, 0x3a, 0x28,
	0xc2, 0x98, 0x5f, 0xf9, 0xf7, 0x17, 0xd5, 0xb7, 0xc4, 0x1f, 0x9b, 0x70, 0xf6, 0x00, 0x3c, 0x75,
	0x95, 0xf6, 0x7b, 0xa6, 0xf3, 0xfc, 0x68, 0xe1, 0x16, 0x9b, 0x26, 0xd8, 0x98, 0xc1, 0xdf, 0xaa,
	0xb0, 0xd6, 0xd5, 0x5c, 0x17, 0x2a, 0x44, 0x95, 0x67, 0xa9, 0x42, 0xb6, 0x03, 0xb5, 0x42, 0xa1,
	0xa4, 0x36, 0x6d, 0x1d, 0xb6, 0xf6, 0xed, 0x71, 0x7a, 0xad, 0x50, 0x86, 0x34, 0x60, 0x02, 0x54,
	0x96, 0x0e, 0xa9, 0x6b, 0xaf, 0x03, 0x4c, 0x83, 0x87, 0x34, 0xc0, 0xbe, 0x86, 0x9a, 0x48, 0x07,
	0x19, 0xb5, 0x6f, 0xeb, 0xb0, 0x3d, 0x11, 0x70, 0x9a, 0x0e, 0xb2, 0x90, 0x06, 0xd9, 0x43, 0x58,
	0x8d, 0x85, 0xd2, 0x98, 0xa2, 0xec, 0x51, 0xb4, 0x6d, 0xe9, 0x3b, 0x2e, 0xfa, 0x85, 0x1b, 0x23,
	0xc4, 0x4a, 0x3c, 0x61, 0x99, 0x62, 0xe9, 0x91, 0x44, 0x6e, 0xbb, 0xd9, 0x0b, 0x9d, 0xc5, 0x9e,
	0x40, 0x5b, 0x69, 0x89, 0x3c, 0x41, 0xd9, 0xeb, 0x67, 0xe9, 0x40, 0x0c, 0xfd, 0x65, 0x9a, 0xf3,
	0x8b, 0x72, 0x07, 0x6e, 0xf4, 0x19, 0x0d, 0x86, 0x6b, 0x6a, 0xca, 0x36, 0x95, 0x1a, 0xe3, 0x53,
	0x9e, 0xa0, 0xdf, 0xa0, 0xe9, 0x57, 0x4a, 0xe7, 0x4b, 0x9e, 0x60, 0x10, 0x02, 0x98, 0x44, 0x5e,
	0xe7, 0x11, 0xd7, 0x38, 0xa6, 0xa2, 0xb2, 0x88, 0x8a, 0xea, 0x47, 0xa8, 0x08, 0xfe, 0x52, 0x81,
	0x66, 0xe9, 0x62, 0x3f, 0x00, 0x28, 0xcd, 0xa5, 0xb6, 0xb5, 0x5c, 0x5a, 0x58, 0x4b, 0x8f, 0xa2,
	0x8d, 0xcd, 0xbe, 0x87, 0x26, 0xa6, 0x91, 0x05, 0xd6, 0x16, 0x02, 0x1b, 0x98, 0x46, 0x04, 0xdb,
	0x81, 0x96, 0x50, 0xbd, 0x01, 0x8f, 0xe3, 0x73, 0xde, 0xbf, 0x20, 0x52, 0x9b, 0x21, 0x08, 0xf5,
	0x1b, 0xe7, 0x09, 0xde, 0x98, 0x1e, 0x99, 0xa2, 0xea, 0x67, 0xb0, 0xee, 0xfa, 0x4f, 0xf5, 0x30,
	0x35, 0x47, 0xc5, 0xca, 0x5a, 0x33, 0x6c, 0x97, 0xfe, 0x13, 0xeb, 0x66, 0x3f, 0x02, 0x78, 0x57,
	0x60, 0x81, 0xbd, 0x42, 0x61, 0xe4, 0x94, 0xce, 0x23, 0xcf, 0x6b, 0x85, 0x91, 0xe1, 0xd3, 0xb4,
	0xd6, 0x35, 0x9f, 0x1f, 0xef, 0xbd, 0x99, 0x1a, 0x55, 0x6f, 0xa9, 0xd1, 0x3f, 0xab, 0x50, 0x33,
	0x98, 0x19, 0xbd, 0xed, 0x40, 0xd3, 0xcc, 0x32, 0x01, 0x1c, 0xdb, 0x24, 0x0f, 0x5c, 0xa9, 0xf7,
	0x99, 0x8c, 0x4a, 0xdd, 0x2d, 0x6d, 0x23, 0x5f, 0x98, 0x70, 0x11, 0x13, 0xab, 0x5e, 0x68, 0x0d,
	0xf6, 0x63, 0x58, 0x93, 0x98, 0x60, 0x72, 0x8e, 0xb2, 0xa7, 0xb3, 0x0b, 0x4c, 0x5d, 0x3f, 0xae,
	0x96, 0xde, 0x33, 0xe3, 0xa4, 0x4d, 0xe4, 0xd4, 0x89, 0x5e, 0x58, 0x15, 0xb9, 0x29, 0x70, 0x41,
	0xd9, 0x46, 0x3d, 0xae, 0xa9, 0xc7, 0x16, 0x14, 0xd8, 0x45, 0x1f, 0x69, 0x03, 0x8d, 0x30, 0x46,
	0x07, 0x6d, 0x2e, 0x86, 0xba, 0x68, 0x0b, 0xed, 0x4b, 0x2c, 0x57, 0xf5, 0x16, 0x43, 0x5d, 0xf4,
	0x91, 0x66, 0xdb, 0x50, 0x8d, 0xde, 0xfa, 0x40, 0x10, 0xcf, 0x95, 0xe4, 0xf8, 0x79, 0x58, 0x8d,
	0xde, 0x06, 0xff, 0xa9, 0x40, 0xf5, 0xf8, 0xf9, 0x6d, 0xf7, 0xda, 0x04, 0xc7, 0xf4, 0x6d, 0x38,
	0x94, 0x38, 0xc4, 0x0f, 0x8e, 0x5c, 0x6b, 0x90, 0xca, 0xe3, 0x07, 0xed, 0x88, 0xa5, 0x6f, 0x13,
	0x29, 0x12, 0x3e, 0x44, 0x47, 0xa7, 0x35, 0x98, 0x0f, 0x8d, 0x4b, 0xa1, 0x84, 0xd1, 0xe8, 0x65,
	0xea, 0xb4, 0xd2, 0x9c, 0x12, 0xf6, 0xc6, 0x0d, 0x61, 0x67, 0x50, 0x93, 0x59, 0x8c, 0xc4, 0x95,
	0x17, 0xd2, 0x37, 0x5b, 0x87, 0xa5, 0xbe, 0x52, 0xc4, 0x81, 0x17, 0x9a, 0x4f, 0xb3, 0x62, 0x3f,
	0x8b, 0x33, 0x49, 0x49, 0x7a, 0xa1, 0x35, 0x58, 0x00, 0x75, 0x3d, 0xc2, 0x04, 0xfd, 0x16, 0xa5,
	0xbe, 0xe2, 0x52, 0x3f, 0x33, 0xbe, 0xd0, 0x0e, 0x05, 0x03, 0xa8, 0x93, 0xfd, 0x49, 0x14, 0x7c,
	0x05, 0x2b, 0x91, 0x50, 0xe6, 0x26, 0xb6, 0xbd, 0x6b, 0x99, 0x68, 0x39, 0x9f, 0x69, 0x5d, 0xba,
	0x56, 0x0b, 0x3d, 0xca, 0xa4, 0x63, 0xc4, 0x59, 0xc1, 0x2f, 0x60, 0x65, 0x52, 0x11, 0xd9, 0x7d,
	0xf0, 0x4a, 0x4d, 0x54, 0xb4, 0xea, 0x52, 0x78, 0xed, 0x08, 0xfe, 0x58, 0x81, 0x75, 0x23, 0x28,
	0x47, 0x69, 0x9a, 0x15, 0x69, 0x1f, 0x13, 0x4c, 0xf5, 0xff, 0x47, 0xab, 0x66, 0x65, 0x7b, 0xe9,
	0x13, 0x65, 0x3b, 0x78, 0x04, 0x5b, 0xb4, 0x98, 0xd5, 0x87, 0xcf, 0xda, 0x5a, 0xf0, 0x2b, 0x58,
	0x2f, 0x15, 0x68, 0x7c, 0x4f, 0x05, 0x50, 0x47, 0x29, 0x33, 0x23, 0x16, 0x4b, 0x13, 0xe5, 0x39,
	0x31, 0xbe, 0xd0, 0x0e, 0x05, 0xff, 0xa8, 0x00, 0xfc, 0xce, 0x68, 0xcd, 0x49, 0xaa, 0xe5, 0xd5,
	0x62, 0x0a, 0x7e, 0x02, 0x6d, 0xa1, 0x8c, 0x52, 0xc9, 0xf2, 0xca, 0x27, 0x36, 0x9a, 0xe1, 0xaa,
	0x50, 0xa4, 0x42, 0xd6, 0xc9, 0x7e, 0x0a, 0x6d, 0x0a, 0x12, 0x11, 0xa6, 0x5a, 0x0c, 0x04, 0x4a,
	0x57, 0xcc, 0x35, 0xe3, 0x3e, 0x1d, 0x7b, 0xd9, 0x73, 0xb8, 0x83, 0x1f, 0x72, 0xec, 0x9b, 0x73,
	0x37, 0x21, 0xeb, 0x8b, 0xd5, 0x79, 0xa3, 0x84, 0x75, 0x4b, 0x79, 0x0f, 0x5e, 0x80, 0x47, 0xb9,
	0x50, 0x03, 0x94, 0xfd, 0x55, 0x99, 0xe8, 0xaf, 0x9f, 0x43, 0x03, 0x53, 0x2d, 0x05, 0x2a, 0xbf,
	0x4a, 0x9c, 0x6c, 0xb8, 0x0c, 0xaf, 0x29, 0x08, 0xcb, 0x88, 0xe0, 0x0f, 0xd0, 0x9a, 0x28, 0xc7,
	0x6d, 0x19, 0x55, 0x6e, 0xcd, 0x68, 0xd1, 0xed, 0x1f, 0x7c, 0x0f, 0x6d, 0x37, 0xe9, 0x67, 0x95,
	0xea, 0xef, 0x15, 0xa8, 0x93, 0xc3, 0xa4, 0x76, 0x21, 0x52, 0x7b, 0x98, 0x56, 0x43, 0xfa, 0x36,
	0xc7, 0x2b, 0xcb, 0xdd, 0x61, 0xaa, 0x66, 0x39, 0xdb, 0x82, 0x86, 0x59, 0xcc, 0x3c, 0x4c, 0x97,
	0xe8, 0xcc, 0x2d, 0x1b, 0xf3, 0x74, 0xfa, 0xc9, 0x5a, 0x9b, 0x7e, 0xb2, 0x1e, 0x40, 0xdd, 0x3e,
	0xae, 0xea, 0x8b, 0x1e, 0x57, 0x36, 0xce, 0x6c, 0x84, 0x5a, 0xdc, 0x6a, 0xb7, 0xed, 0xff, 0xbb,
	0x65, 0x2a, 0x0d, 0x77, 0x15, 0x18, 0xe3, 0xf0, 0xdf, 0x55, 0x68, 0xfc, 0x96, 0xa7, 0x7c, 0x88,
	0x92, 0x3d, 0x80, 0x65, 0xfb, 0xa2, 0x62, 0x9b, 0x33, 0x2b, 0x9c, 0x98, 0xdf, 0x8a, 0xce, 0xf5,
	0x7b, 0x64, 0xea, 0xe1, 0xf5, 0x4b, 0x68, 0x74, 0x51, 0xd3, 0xc5, 0xb5, 0x31, 0x71, 0xf3, 0xd9,
	0xab, 0xb1, 0x33, 0x67, 0x32, 0x87, 0xa2, 0xdf, 0x8b, 0x8d, 0x89, 0x62, 0x2c, 0x40, 0x3d, 0x85,
	0x0d, 0x83, 0x9a, 0xbe, 0xd5, 0x6f, 0x7f, 0x27, 0xcd, 0x9d, 0xe3, 0x08, 0xbc, 0x2e, 0xea, 0x33,
	0xfb, 0xf8, 0xba, 0x3f, 0x13, 0xd4, 0xd5, 0x52, 0xa4, 0xc3, 0xdf, 0xf3, 0xb8, 0x98, 0xbf, 0x8d,
	0x27, 0xd0, 0xee, 0xa2, 0x9e, 0x52, 0xb6, 0xdb, 0x94, 0x64, 0x1e, 0xfe, 0xf0, 0x4f, 0x15, 0xf0,
	0x4a, 0x25, 0x91, 0xec, 0xd7, 0xb0, 0x52, 0x1a, 0xc4, 0xc7, 0xd6, 0x04, 0x1f, 0x93, 0x7a, 0x33,
	0x77, 0x3b, 0xa7, 0xd0, 0x2e, 0xe3, 0xca, 0x73, 0xf1, 0xe5, 0x64, 0x83, 0xcf, 0x4a, 0xd7, 0xdc,
	0x9d, 0xfd, 0xb5, 0x0a, 0xcd, 0x92, 0x47, 0xf6, 0x10, 0xea, 0x74, 0x8c, 0xe7, 0x76, 0xc4, 0xd6,
	0x0d, 0xe6, 0xc7, 0x3d, 0xf1, 0x18, 0x6a, 0x5d, 0x9d, 0xe5, 0x6c, 0x56, 0x2a, 0x9e, 0x66, 0x59,
	0x6c, 0xc9, 0x9d, 0x0b, 0xfe, 0x01, 0x5a, 0x6e, 0xcb, 0x44, 0x07, 0x9b, 0x4d, 0xa5, 0xb3, 0xe9,
	0x7c, 0x37, 0x4f, 0xec, 0x23, 0xaa, 0xed, 0xff, 0xd6, 0x17, 0xdf, 0x42, 0x9d, 0x04, 0x67, 0x6e,
	0xb6, 0xeb, 0x93, 0xb2, 0x64, 0xea, 0x7b, 0xf8, 0xaf, 0x4a, 0x89, 0x79, 0x00, 0x70, 0x14, 0x45,
	0x25, 0xfb, 0xb3, 0x02, 0x36, 0x77, 0xd5, 0x87, 0x26, 0x59, 0x85, 0xf2, 0x12, 0x5f, 0x9a, 0x47,
	0xc4, 0xbc, 0xb5, 0x67, 0x67, 0x34, 0x07, 0x36, 0xc4, 0x24, 0xbb, 0xc4, 0xdb, 0x96, 0xfb, 0x08,
	0xf1, 0xec, 0x3b, 0x68, 0x9c, 0x58, 0x35, 0xfd, 0xf4, 0x54, 0x9f, 0x7e, 0xf5, 0x66, 0x67, 0x28,
	0xf4, 0xa8, 0x38, 0xdf, 0xef, 0x67, 0xc9, 0x41, 0xf8, 0x0d, 0xff, 0x26, 0x12, 0xd9, 0xc1, 0x25,
	0x8f, 0x2f, 0xae, 0xa4, 0xc0, 0x03, 0x99, 0xf7, 0xcf, 0x97, 0x69, 0x92, 0xef, 0xfe, 0x1b, 0x00,
	0x00, 0xff, 0xff, 0xbb, 0xc6, 0x06, 0x0c, 0xca, 0x10, 0x00, 0x00,
}
