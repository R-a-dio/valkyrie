// Code generated by protoc-gen-twirp v5.5.0, DO NOT EDIT.
// source: rpc/ircbot.proto

package rpc

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// =============
// Bot Interface
// =============

type Bot interface {
	AnnounceSong(context.Context, *SongAnnouncement) (*Null, error)
}

// ===================
// Bot Protobuf Client
// ===================

type botProtobufClient struct {
	client HTTPClient
	urls   [1]string
}

// NewBotProtobufClient creates a Protobuf client that implements the Bot interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewBotProtobufClient(addr string, client HTTPClient) Bot {
	prefix := urlBase(addr) + BotPathPrefix
	urls := [1]string{
		prefix + "AnnounceSong",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &botProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &botProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *botProtobufClient) AnnounceSong(ctx context.Context, in *SongAnnouncement) (*Null, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio.rpc")
	ctx = ctxsetters.WithServiceName(ctx, "Bot")
	ctx = ctxsetters.WithMethodName(ctx, "AnnounceSong")
	out := new(Null)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===============
// Bot JSON Client
// ===============

type botJSONClient struct {
	client HTTPClient
	urls   [1]string
}

// NewBotJSONClient creates a JSON client that implements the Bot interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewBotJSONClient(addr string, client HTTPClient) Bot {
	prefix := urlBase(addr) + BotPathPrefix
	urls := [1]string{
		prefix + "AnnounceSong",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &botJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &botJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *botJSONClient) AnnounceSong(ctx context.Context, in *SongAnnouncement) (*Null, error) {
	ctx = ctxsetters.WithPackageName(ctx, "radio.rpc")
	ctx = ctxsetters.WithServiceName(ctx, "Bot")
	ctx = ctxsetters.WithMethodName(ctx, "AnnounceSong")
	out := new(Null)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==================
// Bot Server Handler
// ==================

type botServer struct {
	Bot
	hooks *twirp.ServerHooks
}

func NewBotServer(svc Bot, hooks *twirp.ServerHooks) TwirpServer {
	return &botServer{
		Bot:   svc,
		hooks: hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *botServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// BotPathPrefix is used for all URL paths on a twirp Bot server.
// Requests are always: POST BotPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const BotPathPrefix = "/twirp/radio.rpc.Bot/"

func (s *botServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "radio.rpc")
	ctx = ctxsetters.WithServiceName(ctx, "Bot")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/radio.rpc.Bot/AnnounceSong":
		s.serveAnnounceSong(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *botServer) serveAnnounceSong(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAnnounceSongJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAnnounceSongProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *botServer) serveAnnounceSongJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AnnounceSong")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(SongAnnouncement)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *Null
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Bot.AnnounceSong(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Null and nil error while calling AnnounceSong. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *botServer) serveAnnounceSongProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AnnounceSong")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(SongAnnouncement)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *Null
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Bot.AnnounceSong(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Null and nil error while calling AnnounceSong. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *botServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor2, 0
}

func (s *botServer) ProtocGenTwirpVersion() string {
	return "v5.5.0"
}

var twirpFileDescriptor2 = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0xb1, 0x4b, 0xc4, 0x30,
	0x14, 0x87, 0xa9, 0x27, 0xc2, 0x45, 0xe1, 0xce, 0x4c, 0x47, 0x15, 0x3c, 0x75, 0xb9, 0xe5, 0x12,
	0xa8, 0xab, 0x8b, 0x75, 0x77, 0xa8, 0xb8, 0xb8, 0xa5, 0x69, 0x88, 0xc1, 0xf4, 0xbd, 0xf0, 0x92,
	0x0a, 0xfd, 0xef, 0x25, 0x2d, 0x6a, 0x71, 0xfd, 0xbe, 0xe4, 0xfb, 0xf1, 0xd8, 0x96, 0x82, 0x96,
	0x8e, 0x74, 0x8b, 0x49, 0x04, 0xc2, 0x84, 0x7c, 0x4d, 0xaa, 0x73, 0x28, 0x28, 0xe8, 0xf2, 0x32,
	0xcb, 0x5e, 0x81, 0xb2, 0x86, 0x66, 0x5b, 0x6e, 0x32, 0x4a, 0x63, 0x30, 0x71, 0x06, 0x77, 0x6f,
	0x6c, 0xfb, 0x8a, 0x60, 0x9f, 0x00, 0x70, 0x00, 0x6d, 0x7a, 0x03, 0x89, 0xdf, 0xb3, 0xd3, 0x88,
	0x60, 0x77, 0xc5, 0xbe, 0x38, 0x9c, 0x57, 0x1b, 0xf1, 0x5b, 0x14, 0xf9, 0x69, 0x33, 0x49, 0x7e,
	0xcd, 0xd6, 0xde, 0xc5, 0x64, 0xc0, 0x50, 0xdc, 0x9d, 0xec, 0x8b, 0xc3, 0xaa, 0xf9, 0x03, 0xd5,
	0x33, 0x5b, 0xd5, 0x98, 0xf8, 0x23, 0xbb, 0xf8, 0x29, 0xe7, 0xaf, 0xfc, 0xea, 0x5f, 0x6b, 0x39,
	0x5b, 0x2e, 0x87, 0x5e, 0x06, 0xef, 0xeb, 0xdb, 0xf7, 0x1b, 0xeb, 0xd2, 0xc7, 0xd0, 0x0a, 0x8d,
	0xbd, 0x6c, 0x8e, 0xea, 0xd8, 0x39, 0x94, 0x5f, 0xca, 0x7f, 0x8e, 0xe4, 0x8c, 0xa4, 0xa0, 0xdb,
	0xb3, 0xe9, 0x8a, 0x87, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x13, 0x05, 0x6b, 0xd4, 0x08, 0x01,
	0x00, 0x00,
}
