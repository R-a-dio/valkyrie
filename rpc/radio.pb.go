// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.19.6
// source: radio.proto

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GuestAction int32

const (
	GuestAction_None   GuestAction = 0
	GuestAction_Kick   GuestAction = 1
	GuestAction_Thread GuestAction = 2
)

// Enum value maps for GuestAction.
var (
	GuestAction_name = map[int32]string{
		0: "None",
		1: "Kick",
		2: "Thread",
	}
	GuestAction_value = map[string]int32{
		"None":   0,
		"Kick":   1,
		"Thread": 2,
	}
)

func (x GuestAction) Enum() *GuestAction {
	p := new(GuestAction)
	*p = x
	return p
}

func (x GuestAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuestAction) Descriptor() protoreflect.EnumDescriptor {
	return file_radio_proto_enumTypes[0].Descriptor()
}

func (GuestAction) Type() protoreflect.EnumType {
	return &file_radio_proto_enumTypes[0]
}

func (x GuestAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuestAction.Descriptor instead.
func (GuestAction) EnumDescriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{0}
}

type ProxySourceEventType int32

const (
	ProxySourceEventType_Disconnect ProxySourceEventType = 0
	ProxySourceEventType_Connect    ProxySourceEventType = 1
	ProxySourceEventType_Live       ProxySourceEventType = 2
)

// Enum value maps for ProxySourceEventType.
var (
	ProxySourceEventType_name = map[int32]string{
		0: "Disconnect",
		1: "Connect",
		2: "Live",
	}
	ProxySourceEventType_value = map[string]int32{
		"Disconnect": 0,
		"Connect":    1,
		"Live":       2,
	}
)

func (x ProxySourceEventType) Enum() *ProxySourceEventType {
	p := new(ProxySourceEventType)
	*p = x
	return p
}

func (x ProxySourceEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProxySourceEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_radio_proto_enumTypes[1].Descriptor()
}

func (ProxySourceEventType) Type() protoreflect.EnumType {
	return &file_radio_proto_enumTypes[1]
}

func (x ProxySourceEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProxySourceEventType.Descriptor instead.
func (ProxySourceEventType) EnumDescriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{1}
}

type Song struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// song identifier (esong.id)
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// sha1 hexdigest of metadata contents
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// short metadata
	Metadata string `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"` // required
	// song length
	Length *durationpb.Duration `protobuf:"bytes,4,opt,name=length,proto3" json:"length,omitempty"`
	// last time this song was played
	LastPlayed *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_played,json=lastPlayed,proto3" json:"last_played,omitempty"`
	HashLink   string                 `protobuf:"bytes,6,opt,name=hash_link,json=hashLink,proto3" json:"hash_link,omitempty"`
	// the user that last played this song
	LastPlayedBy *User `protobuf:"bytes,7,opt,name=last_played_by,json=lastPlayedBy,proto3" json:"last_played_by,omitempty"`
	// DatabaseTrack fields
	TrackId         uint64                 `protobuf:"varint,16,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	Artist          string                 `protobuf:"bytes,17,opt,name=artist,proto3" json:"artist,omitempty"`
	Title           string                 `protobuf:"bytes,18,opt,name=title,proto3" json:"title,omitempty"`
	Album           string                 `protobuf:"bytes,19,opt,name=album,proto3" json:"album,omitempty"`
	FilePath        string                 `protobuf:"bytes,20,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	Tags            string                 `protobuf:"bytes,21,opt,name=tags,proto3" json:"tags,omitempty"`
	Acceptor        string                 `protobuf:"bytes,22,opt,name=acceptor,proto3" json:"acceptor,omitempty"`
	LastEditor      string                 `protobuf:"bytes,23,opt,name=last_editor,json=lastEditor,proto3" json:"last_editor,omitempty"`
	Priority        int32                  `protobuf:"varint,24,opt,name=priority,proto3" json:"priority,omitempty"`
	Usable          bool                   `protobuf:"varint,25,opt,name=usable,proto3" json:"usable,omitempty"`
	NeedReplacement bool                   `protobuf:"varint,29,opt,name=need_replacement,json=needReplacement,proto3" json:"need_replacement,omitempty"`
	LastRequested   *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=last_requested,json=lastRequested,proto3" json:"last_requested,omitempty"`
	RequestCount    int32                  `protobuf:"varint,27,opt,name=request_count,json=requestCount,proto3" json:"request_count,omitempty"`
	RequestDelay    *durationpb.Duration   `protobuf:"bytes,28,opt,name=request_delay,json=requestDelay,proto3" json:"request_delay,omitempty"`
	// the time the fields above were acquired from the database
	SyncTime *timestamppb.Timestamp `protobuf:"bytes,100,opt,name=sync_time,json=syncTime,proto3" json:"sync_time,omitempty"`
}

func (x *Song) Reset() {
	*x = Song{}
	mi := &file_radio_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Song) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Song) ProtoMessage() {}

func (x *Song) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Song.ProtoReflect.Descriptor instead.
func (*Song) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{0}
}

func (x *Song) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Song) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Song) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *Song) GetLength() *durationpb.Duration {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *Song) GetLastPlayed() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPlayed
	}
	return nil
}

func (x *Song) GetHashLink() string {
	if x != nil {
		return x.HashLink
	}
	return ""
}

func (x *Song) GetLastPlayedBy() *User {
	if x != nil {
		return x.LastPlayedBy
	}
	return nil
}

func (x *Song) GetTrackId() uint64 {
	if x != nil {
		return x.TrackId
	}
	return 0
}

func (x *Song) GetArtist() string {
	if x != nil {
		return x.Artist
	}
	return ""
}

func (x *Song) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Song) GetAlbum() string {
	if x != nil {
		return x.Album
	}
	return ""
}

func (x *Song) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *Song) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *Song) GetAcceptor() string {
	if x != nil {
		return x.Acceptor
	}
	return ""
}

func (x *Song) GetLastEditor() string {
	if x != nil {
		return x.LastEditor
	}
	return ""
}

func (x *Song) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Song) GetUsable() bool {
	if x != nil {
		return x.Usable
	}
	return false
}

func (x *Song) GetNeedReplacement() bool {
	if x != nil {
		return x.NeedReplacement
	}
	return false
}

func (x *Song) GetLastRequested() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRequested
	}
	return nil
}

func (x *Song) GetRequestCount() int32 {
	if x != nil {
		return x.RequestCount
	}
	return 0
}

func (x *Song) GetRequestDelay() *durationpb.Duration {
	if x != nil {
		return x.RequestDelay
	}
	return nil
}

func (x *Song) GetSyncTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SyncTime
	}
	return nil
}

type GuestCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     *User  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *GuestCreateResponse) Reset() {
	*x = GuestCreateResponse{}
	mi := &file_radio_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuestCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuestCreateResponse) ProtoMessage() {}

func (x *GuestCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuestCreateResponse.ProtoReflect.Descriptor instead.
func (*GuestCreateResponse) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{1}
}

func (x *GuestCreateResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GuestCreateResponse) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type GuestAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GuestAuthResponse) Reset() {
	*x = GuestAuthResponse{}
	mi := &file_radio_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuestAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuestAuthResponse) ProtoMessage() {}

func (x *GuestAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuestAuthResponse.ProtoReflect.Descriptor instead.
func (*GuestAuthResponse) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{2}
}

func (x *GuestAuthResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type GuestUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GuestUser) Reset() {
	*x = GuestUser{}
	mi := &file_radio_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuestUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuestUser) ProtoMessage() {}

func (x *GuestUser) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuestUser.ProtoReflect.Descriptor instead.
func (*GuestUser) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{3}
}

func (x *GuestUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GuestCanDo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User   *GuestUser  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Action GuestAction `protobuf:"varint,2,opt,name=action,proto3,enum=radio.GuestAction" json:"action,omitempty"`
}

func (x *GuestCanDo) Reset() {
	*x = GuestCanDo{}
	mi := &file_radio_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuestCanDo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuestCanDo) ProtoMessage() {}

func (x *GuestCanDo) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuestCanDo.ProtoReflect.Descriptor instead.
func (*GuestCanDo) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{4}
}

func (x *GuestCanDo) GetUser() *GuestUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GuestCanDo) GetAction() GuestAction {
	if x != nil {
		return x.Action
	}
	return GuestAction_None
}

type ProxyListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources []*ProxySource `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
}

func (x *ProxyListResponse) Reset() {
	*x = ProxyListResponse{}
	mi := &file_radio_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyListResponse) ProtoMessage() {}

func (x *ProxyListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyListResponse.ProtoReflect.Descriptor instead.
func (*ProxyListResponse) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{5}
}

func (x *ProxyListResponse) GetSources() []*ProxySource {
	if x != nil {
		return x.Sources
	}
	return nil
}

type ProxyStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ProxyStatusRequest) Reset() {
	*x = ProxyStatusRequest{}
	mi := &file_radio_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyStatusRequest) ProtoMessage() {}

func (x *ProxyStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyStatusRequest.ProtoReflect.Descriptor instead.
func (*ProxyStatusRequest) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{6}
}

func (x *ProxyStatusRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ProxyStatusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*ProxySource `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *ProxyStatusEvent) Reset() {
	*x = ProxyStatusEvent{}
	mi := &file_radio_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyStatusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyStatusEvent) ProtoMessage() {}

func (x *ProxyStatusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyStatusEvent.ProtoReflect.Descriptor instead.
func (*ProxyStatusEvent) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{7}
}

func (x *ProxyStatusEvent) GetConnections() []*ProxySource {
	if x != nil {
		return x.Connections
	}
	return nil
}

type ProxySource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User      *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	MountName string                 `protobuf:"bytes,2,opt,name=mount_name,json=mountName,proto3" json:"mount_name,omitempty"`
	Ip        string                 `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	UserAgent string                 `protobuf:"bytes,4,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Metadata  string                 `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Priority  uint32                 `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	ID        *SourceID              `protobuf:"bytes,7,opt,name=ID,proto3" json:"ID,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	IsLive    bool                   `protobuf:"varint,9,opt,name=is_live,json=isLive,proto3" json:"is_live,omitempty"`
}

func (x *ProxySource) Reset() {
	*x = ProxySource{}
	mi := &file_radio_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxySource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxySource) ProtoMessage() {}

func (x *ProxySource) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxySource.ProtoReflect.Descriptor instead.
func (*ProxySource) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{8}
}

func (x *ProxySource) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ProxySource) GetMountName() string {
	if x != nil {
		return x.MountName
	}
	return ""
}

func (x *ProxySource) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ProxySource) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *ProxySource) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *ProxySource) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ProxySource) GetID() *SourceID {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *ProxySource) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ProxySource) GetIsLive() bool {
	if x != nil {
		return x.IsLive
	}
	return false
}

type ProxySourceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User      *User                `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	MountName string               `protobuf:"bytes,2,opt,name=mount_name,json=mountName,proto3" json:"mount_name,omitempty"`
	Event     ProxySourceEventType `protobuf:"varint,3,opt,name=event,proto3,enum=radio.ProxySourceEventType" json:"event,omitempty"`
	ID        *SourceID            `protobuf:"bytes,4,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ProxySourceEvent) Reset() {
	*x = ProxySourceEvent{}
	mi := &file_radio_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxySourceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxySourceEvent) ProtoMessage() {}

func (x *ProxySourceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxySourceEvent.ProtoReflect.Descriptor instead.
func (*ProxySourceEvent) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{9}
}

func (x *ProxySourceEvent) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ProxySourceEvent) GetMountName() string {
	if x != nil {
		return x.MountName
	}
	return ""
}

func (x *ProxySourceEvent) GetEvent() ProxySourceEventType {
	if x != nil {
		return x.Event
	}
	return ProxySourceEventType_Disconnect
}

func (x *ProxySourceEvent) GetID() *SourceID {
	if x != nil {
		return x.ID
	}
	return nil
}

type SourceID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *SourceID) Reset() {
	*x = SourceID{}
	mi := &file_radio_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceID) ProtoMessage() {}

func (x *SourceID) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceID.ProtoReflect.Descriptor instead.
func (*SourceID) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{10}
}

func (x *SourceID) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ProxyMetadataEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User      *User  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	MountName string `protobuf:"bytes,2,opt,name=mount_name,json=mountName,proto3" json:"mount_name,omitempty"`
	Metadata  string `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ProxyMetadataEvent) Reset() {
	*x = ProxyMetadataEvent{}
	mi := &file_radio_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyMetadataEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyMetadataEvent) ProtoMessage() {}

func (x *ProxyMetadataEvent) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyMetadataEvent.ProtoReflect.Descriptor instead.
func (*ProxyMetadataEvent) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{11}
}

func (x *ProxyMetadataEvent) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ProxyMetadataEvent) GetMountName() string {
	if x != nil {
		return x.MountName
	}
	return ""
}

func (x *ProxyMetadataEvent) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the current user that is streaming (or was streaming)
	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// the current song being played
	Song *Song `protobuf:"bytes,2,opt,name=song,proto3" json:"song,omitempty"`
	// information about the current song
	Info *SongInfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	// information about the current listeners
	ListenerInfo *ListenerInfo `protobuf:"bytes,4,opt,name=listener_info,json=listenerInfo,proto3" json:"listener_info,omitempty"`
	// the current thread to be shown on the website or elsewhere
	Thread string `protobuf:"bytes,5,opt,name=thread,proto3" json:"thread,omitempty"`
	// the current configuration of the streamer
	StreamerConfig *StreamerConfig `protobuf:"bytes,6,opt,name=streamer_config,json=streamerConfig,proto3" json:"streamer_config,omitempty"`
	// the display name given to us by the streaming user
	StreamerName string `protobuf:"bytes,7,opt,name=streamer_name,json=streamerName,proto3" json:"streamer_name,omitempty"`
	// the current user that is streaming
	StreamUser *User `protobuf:"bytes,8,opt,name=stream_user,json=streamUser,proto3" json:"stream_user,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_radio_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{12}
}

func (x *StatusResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *StatusResponse) GetSong() *Song {
	if x != nil {
		return x.Song
	}
	return nil
}

func (x *StatusResponse) GetInfo() *SongInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *StatusResponse) GetListenerInfo() *ListenerInfo {
	if x != nil {
		return x.ListenerInfo
	}
	return nil
}

func (x *StatusResponse) GetThread() string {
	if x != nil {
		return x.Thread
	}
	return ""
}

func (x *StatusResponse) GetStreamerConfig() *StreamerConfig {
	if x != nil {
		return x.StreamerConfig
	}
	return nil
}

func (x *StatusResponse) GetStreamerName() string {
	if x != nil {
		return x.StreamerName
	}
	return ""
}

func (x *StatusResponse) GetStreamUser() *User {
	if x != nil {
		return x.StreamUser
	}
	return nil
}

type SongUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Song *Song     `protobuf:"bytes,1,opt,name=song,proto3" json:"song,omitempty"`
	Info *SongInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *SongUpdate) Reset() {
	*x = SongUpdate{}
	mi := &file_radio_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SongUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SongUpdate) ProtoMessage() {}

func (x *SongUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SongUpdate.ProtoReflect.Descriptor instead.
func (*SongUpdate) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{13}
}

func (x *SongUpdate) GetSong() *Song {
	if x != nil {
		return x.Song
	}
	return nil
}

func (x *SongUpdate) GetInfo() *SongInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type SongInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the time this song started playing
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// the time this song will end playing
	EndTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *SongInfo) Reset() {
	*x = SongInfo{}
	mi := &file_radio_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SongInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SongInfo) ProtoMessage() {}

func (x *SongInfo) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SongInfo.ProtoReflect.Descriptor instead.
func (*SongInfo) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{14}
}

func (x *SongInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *SongInfo) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type StreamerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// can users request songs to be played right now
	RequestsEnabled bool `protobuf:"varint,1,opt,name=requests_enabled,json=requestsEnabled,proto3" json:"requests_enabled,omitempty"`
	// the queue implementation to use for the streamer
	QueueUsed string `protobuf:"bytes,2,opt,name=queue_used,json=queueUsed,proto3" json:"queue_used,omitempty"`
}

func (x *StreamerConfig) Reset() {
	*x = StreamerConfig{}
	mi := &file_radio_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamerConfig) ProtoMessage() {}

func (x *StreamerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamerConfig.ProtoReflect.Descriptor instead.
func (*StreamerConfig) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{15}
}

func (x *StreamerConfig) GetRequestsEnabled() bool {
	if x != nil {
		return x.RequestsEnabled
	}
	return false
}

func (x *StreamerConfig) GetQueueUsed() string {
	if x != nil {
		return x.QueueUsed
	}
	return ""
}

type UserUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User         *User  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	StreamerName string `protobuf:"bytes,2,opt,name=streamer_name,json=streamerName,proto3" json:"streamer_name,omitempty"`
}

func (x *UserUpdate) Reset() {
	*x = UserUpdate{}
	mi := &file_radio_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUpdate) ProtoMessage() {}

func (x *UserUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUpdate.ProtoReflect.Descriptor instead.
func (*UserUpdate) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{16}
}

func (x *UserUpdate) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserUpdate) GetStreamerName() string {
	if x != nil {
		return x.StreamerName
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user fields
	Id              int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username        string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password        string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Email           string                 `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	RememberToken   string                 `protobuf:"bytes,5,opt,name=remember_token,json=rememberToken,proto3" json:"remember_token,omitempty"`
	Ip              string                 `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Dj              *DJ                    `protobuf:"bytes,10,opt,name=dj,proto3" json:"dj,omitempty"`
	UserPermissions []string               `protobuf:"bytes,11,rep,name=user_permissions,json=userPermissions,proto3" json:"user_permissions,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_radio_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{17}
}

func (x *User) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetRememberToken() string {
	if x != nil {
		return x.RememberToken
	}
	return ""
}

func (x *User) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *User) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetDj() *DJ {
	if x != nil {
		return x.Dj
	}
	return nil
}

func (x *User) GetUserPermissions() []string {
	if x != nil {
		return x.UserPermissions
	}
	return nil
}

type DJ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DJ fields
	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Regex    string `protobuf:"bytes,3,opt,name=regex,proto3" json:"regex,omitempty"`
	Text     string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Image    string `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	Visible  bool   `protobuf:"varint,6,opt,name=visible,proto3" json:"visible,omitempty"`
	Priority int32  `protobuf:"varint,7,opt,name=priority,proto3" json:"priority,omitempty"`
	Role     string `protobuf:"bytes,8,opt,name=role,proto3" json:"role,omitempty"`
	Css      string `protobuf:"bytes,9,opt,name=css,proto3" json:"css,omitempty"`
	Color    string `protobuf:"bytes,10,opt,name=color,proto3" json:"color,omitempty"`
	Theme    string `protobuf:"bytes,11,opt,name=theme,proto3" json:"theme,omitempty"`
}

func (x *DJ) Reset() {
	*x = DJ{}
	mi := &file_radio_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DJ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DJ) ProtoMessage() {}

func (x *DJ) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DJ.ProtoReflect.Descriptor instead.
func (*DJ) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{18}
}

func (x *DJ) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DJ) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DJ) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

func (x *DJ) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *DJ) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *DJ) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *DJ) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *DJ) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *DJ) GetCss() string {
	if x != nil {
		return x.Css
	}
	return ""
}

func (x *DJ) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *DJ) GetTheme() string {
	if x != nil {
		return x.Theme
	}
	return ""
}

type ListenerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the amount of listeners to the stream
	Listeners int64 `protobuf:"varint,1,opt,name=listeners,proto3" json:"listeners,omitempty"`
}

func (x *ListenerInfo) Reset() {
	*x = ListenerInfo{}
	mi := &file_radio_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerInfo) ProtoMessage() {}

func (x *ListenerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerInfo.ProtoReflect.Descriptor instead.
func (*ListenerInfo) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{19}
}

func (x *ListenerInfo) GetListeners() int64 {
	if x != nil {
		return x.Listeners
	}
	return 0
}

type SongAnnouncement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Song         *Song         `protobuf:"bytes,1,opt,name=song,proto3" json:"song,omitempty"`
	Info         *SongInfo     `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	ListenerInfo *ListenerInfo `protobuf:"bytes,3,opt,name=listener_info,json=listenerInfo,proto3" json:"listener_info,omitempty"`
}

func (x *SongAnnouncement) Reset() {
	*x = SongAnnouncement{}
	mi := &file_radio_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SongAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SongAnnouncement) ProtoMessage() {}

func (x *SongAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SongAnnouncement.ProtoReflect.Descriptor instead.
func (*SongAnnouncement) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{20}
}

func (x *SongAnnouncement) GetSong() *Song {
	if x != nil {
		return x.Song
	}
	return nil
}

func (x *SongAnnouncement) GetInfo() *SongInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SongAnnouncement) GetListenerInfo() *ListenerInfo {
	if x != nil {
		return x.ListenerInfo
	}
	return nil
}

type SongRequestAnnouncement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Song *Song `protobuf:"bytes,1,opt,name=song,proto3" json:"song,omitempty"`
}

func (x *SongRequestAnnouncement) Reset() {
	*x = SongRequestAnnouncement{}
	mi := &file_radio_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SongRequestAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SongRequestAnnouncement) ProtoMessage() {}

func (x *SongRequestAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SongRequestAnnouncement.ProtoReflect.Descriptor instead.
func (*SongRequestAnnouncement) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{21}
}

func (x *SongRequestAnnouncement) GetSong() *Song {
	if x != nil {
		return x.Song
	}
	return nil
}

type UserAnnouncement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UserAnnouncement) Reset() {
	*x = UserAnnouncement{}
	mi := &file_radio_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnnouncement) ProtoMessage() {}

func (x *UserAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnnouncement.ProtoReflect.Descriptor instead.
func (*UserAnnouncement) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{22}
}

func (x *UserAnnouncement) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type StreamerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error []*Error `protobuf:"bytes,1,rep,name=error,proto3" json:"error,omitempty"`
}

func (x *StreamerResponse) Reset() {
	*x = StreamerResponse{}
	mi := &file_radio_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamerResponse) ProtoMessage() {}

func (x *StreamerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamerResponse.ProtoReflect.Descriptor instead.
func (*StreamerResponse) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{23}
}

func (x *StreamerResponse) GetError() []*Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type QueueID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *QueueID) Reset() {
	*x = QueueID{}
	mi := &file_radio_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueID) ProtoMessage() {}

func (x *QueueID) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueID.ProtoReflect.Descriptor instead.
func (*QueueID) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{24}
}

func (x *QueueID) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type QueueEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Song *Song `protobuf:"bytes,1,opt,name=song,proto3" json:"song,omitempty"`
	// is_user_request indicates if this was a request made by a human
	IsUserRequest bool `protobuf:"varint,2,opt,name=is_user_request,json=isUserRequest,proto3" json:"is_user_request,omitempty"`
	// user_identifier is the way we identify the user that added this to the
	// queue; This can be anything that uniquely identifies a user
	UserIdentifier string `protobuf:"bytes,3,opt,name=user_identifier,json=userIdentifier,proto3" json:"user_identifier,omitempty"`
	// expected_start_time is the expected time this song will start playing
	ExpectedStartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expected_start_time,json=expectedStartTime,proto3" json:"expected_start_time,omitempty"`
	// unique id of the entry
	QueueId *QueueID `protobuf:"bytes,5,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
}

func (x *QueueEntry) Reset() {
	*x = QueueEntry{}
	mi := &file_radio_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueEntry) ProtoMessage() {}

func (x *QueueEntry) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueEntry.ProtoReflect.Descriptor instead.
func (*QueueEntry) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{25}
}

func (x *QueueEntry) GetSong() *Song {
	if x != nil {
		return x.Song
	}
	return nil
}

func (x *QueueEntry) GetIsUserRequest() bool {
	if x != nil {
		return x.IsUserRequest
	}
	return false
}

func (x *QueueEntry) GetUserIdentifier() string {
	if x != nil {
		return x.UserIdentifier
	}
	return ""
}

func (x *QueueEntry) GetExpectedStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpectedStartTime
	}
	return nil
}

func (x *QueueEntry) GetQueueId() *QueueID {
	if x != nil {
		return x.QueueId
	}
	return nil
}

type QueueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of the queue implementation
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the entries in the queue
	Entries []*QueueEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *QueueInfo) Reset() {
	*x = QueueInfo{}
	mi := &file_radio_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueInfo) ProtoMessage() {}

func (x *QueueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueInfo.ProtoReflect.Descriptor instead.
func (*QueueInfo) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{26}
}

func (x *QueueInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueueInfo) GetEntries() []*QueueEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type SongRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdentifier string `protobuf:"bytes,1,opt,name=user_identifier,json=userIdentifier,proto3" json:"user_identifier,omitempty"`
	Song           *Song  `protobuf:"bytes,2,opt,name=song,proto3" json:"song,omitempty"`
}

func (x *SongRequest) Reset() {
	*x = SongRequest{}
	mi := &file_radio_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SongRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SongRequest) ProtoMessage() {}

func (x *SongRequest) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SongRequest.ProtoReflect.Descriptor instead.
func (*SongRequest) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{27}
}

func (x *SongRequest) GetUserIdentifier() string {
	if x != nil {
		return x.UserIdentifier
	}
	return ""
}

func (x *SongRequest) GetSong() *Song {
	if x != nil {
		return x.Song
	}
	return nil
}

type RequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error []*Error `protobuf:"bytes,1,rep,name=error,proto3" json:"error,omitempty"`
}

func (x *RequestResponse) Reset() {
	*x = RequestResponse{}
	mi := &file_radio_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestResponse) ProtoMessage() {}

func (x *RequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestResponse.ProtoReflect.Descriptor instead.
func (*RequestResponse) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{28}
}

func (x *RequestResponse) GetError() []*Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind    uint32               `protobuf:"varint,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Op      string               `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`
	SongId  int32                `protobuf:"varint,3,opt,name=song_id,json=songId,proto3" json:"song_id,omitempty"`
	TrackId int32                `protobuf:"varint,4,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	Delay   *durationpb.Duration `protobuf:"bytes,5,opt,name=delay,proto3" json:"delay,omitempty"`
	Info    string               `protobuf:"bytes,6,opt,name=info,proto3" json:"info,omitempty"`
	Error   string               `protobuf:"bytes,7,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_radio_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{29}
}

func (x *Error) GetKind() uint32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *Error) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

func (x *Error) GetSongId() int32 {
	if x != nil {
		return x.SongId
	}
	return 0
}

func (x *Error) GetTrackId() int32 {
	if x != nil {
		return x.TrackId
	}
	return 0
}

func (x *Error) GetDelay() *durationpb.Duration {
	if x != nil {
		return x.Delay
	}
	return nil
}

func (x *Error) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *Error) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TrackerRemoveClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TrackerRemoveClientRequest) Reset() {
	*x = TrackerRemoveClientRequest{}
	mi := &file_radio_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackerRemoveClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackerRemoveClientRequest) ProtoMessage() {}

func (x *TrackerRemoveClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackerRemoveClientRequest.ProtoReflect.Descriptor instead.
func (*TrackerRemoveClientRequest) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{30}
}

func (x *TrackerRemoveClientRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Listeners struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*Listener `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *Listeners) Reset() {
	*x = Listeners{}
	mi := &file_radio_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Listeners) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listeners) ProtoMessage() {}

func (x *Listeners) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listeners.ProtoReflect.Descriptor instead.
func (*Listeners) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{31}
}

func (x *Listeners) GetEntries() []*Listener {
	if x != nil {
		return x.Entries
	}
	return nil
}

type Listener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address   string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	UserAgent string                 `protobuf:"bytes,3,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Start     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *Listener) Reset() {
	*x = Listener{}
	mi := &file_radio_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Listener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listener) ProtoMessage() {}

func (x *Listener) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listener.ProtoReflect.Descriptor instead.
func (*Listener) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{32}
}

func (x *Listener) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Listener) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Listener) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *Listener) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

var File_radio_proto protoreflect.FileDescriptor

var file_radio_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x93, 0x06, 0x0a, 0x04, 0x53, 0x6f, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3b,
	0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x31, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x42, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x6e, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3e, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x37, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x73, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x13, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x3a, 0x0a, 0x11,
	0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x1f, 0x0a, 0x09, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x0a, 0x47, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x6e, 0x44, 0x6f, 0x12, 0x24, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x75,
	0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x11, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x2d, 0x0a, 0x12,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x10, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c,
	0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76,
	0x65, 0x22, 0xa6, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x22, 0x1a, 0x0a, 0x08, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x70, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdc, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x04,
	0x73, 0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x12, 0x23, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x12, 0x3e, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x0a, 0x53, 0x6f, 0x6e, 0x67, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x6f, 0x6e, 0x67,
	0x52, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x6f, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x82, 0x01, 0x0a, 0x08,
	0x53, 0x6f, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06,
	0x22, 0x5a, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x55, 0x73, 0x65, 0x64, 0x22, 0x52, 0x0a, 0x0a,
	0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x92, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x19, 0x0a, 0x02, 0x64, 0x6a, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x2e, 0x44, 0x4a, 0x52, 0x02, 0x64, 0x6a, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x02, 0x44, 0x4a, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x53, 0x6f, 0x6e, 0x67, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x73,
	0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x38, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3a, 0x0a, 0x17, 0x53,
	0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x6f, 0x6e,
	0x67, 0x52, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x22, 0x33, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x36, 0x0a, 0x10,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x19, 0x0a, 0x07, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x44, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22,
	0xf5, 0x01, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f,
	0x0a, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x4a, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x08,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x44, 0x52, 0x07,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x0b, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x04, 0x73, 0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x22, 0x35,
	0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xba, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x6f, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x2c, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x36, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x2a, 0x2d, 0x0a, 0x0b, 0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x69, 0x63,
	0x6b, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x10, 0x02, 0x2a,
	0x3d, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x69, 0x76, 0x65, 0x10, 0x02, 0x32, 0x98,
	0x05, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x3a, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x6e, 0x67,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x30, 0x01, 0x12, 0x37, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6e, 0x67, 0x12, 0x11, 0x2e, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x01, 0x12,
	0x44, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x30, 0x01, 0x12, 0x31, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0b, 0x2e, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4d,
	0x0a, 0x14, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x01, 0x12, 0x4a, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xdf, 0x01, 0x0a, 0x05, 0x47, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x1a,
	0x1a, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x10, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x44, 0x65, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x2e, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x43, 0x61, 0x6e, 0x44, 0x6f, 0x12, 0x11, 0x2e, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x44, 0x6f, 0x1a,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0xcf, 0x02, 0x0a, 0x05,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x41, 0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x12, 0x45, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x19, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x12,
	0x44, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x19, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x30, 0x01, 0x12, 0x35, 0x0a, 0x0a, 0x4b, 0x69, 0x63, 0x6b, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x0f, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0b,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd8, 0x01,
	0x0a, 0x09, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x53, 0x6f, 0x6e, 0x67, 0x12, 0x17, 0x2e, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x0f,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xab, 0x02, 0x0a, 0x08, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x17, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x12, 0x12, 0x2e, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xa6, 0x02, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x37, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x11,
	0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x11, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x0e,
	0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x44, 0x1a, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32,
	0x95, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x0c,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x21, 0x5a, 0x1f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x2d, 0x61, 0x2d, 0x64, 0x69, 0x6f, 0x2f, 0x76, 0x61,
	0x6c, 0x6b, 0x79, 0x72, 0x69, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_radio_proto_rawDescOnce sync.Once
	file_radio_proto_rawDescData = file_radio_proto_rawDesc
)

func file_radio_proto_rawDescGZIP() []byte {
	file_radio_proto_rawDescOnce.Do(func() {
		file_radio_proto_rawDescData = protoimpl.X.CompressGZIP(file_radio_proto_rawDescData)
	})
	return file_radio_proto_rawDescData
}

var file_radio_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_radio_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_radio_proto_goTypes = []any{
	(GuestAction)(0),                   // 0: radio.GuestAction
	(ProxySourceEventType)(0),          // 1: radio.ProxySourceEventType
	(*Song)(nil),                       // 2: radio.Song
	(*GuestCreateResponse)(nil),        // 3: radio.GuestCreateResponse
	(*GuestAuthResponse)(nil),          // 4: radio.GuestAuthResponse
	(*GuestUser)(nil),                  // 5: radio.GuestUser
	(*GuestCanDo)(nil),                 // 6: radio.GuestCanDo
	(*ProxyListResponse)(nil),          // 7: radio.ProxyListResponse
	(*ProxyStatusRequest)(nil),         // 8: radio.ProxyStatusRequest
	(*ProxyStatusEvent)(nil),           // 9: radio.ProxyStatusEvent
	(*ProxySource)(nil),                // 10: radio.ProxySource
	(*ProxySourceEvent)(nil),           // 11: radio.ProxySourceEvent
	(*SourceID)(nil),                   // 12: radio.SourceID
	(*ProxyMetadataEvent)(nil),         // 13: radio.ProxyMetadataEvent
	(*StatusResponse)(nil),             // 14: radio.StatusResponse
	(*SongUpdate)(nil),                 // 15: radio.SongUpdate
	(*SongInfo)(nil),                   // 16: radio.SongInfo
	(*StreamerConfig)(nil),             // 17: radio.StreamerConfig
	(*UserUpdate)(nil),                 // 18: radio.UserUpdate
	(*User)(nil),                       // 19: radio.User
	(*DJ)(nil),                         // 20: radio.DJ
	(*ListenerInfo)(nil),               // 21: radio.ListenerInfo
	(*SongAnnouncement)(nil),           // 22: radio.SongAnnouncement
	(*SongRequestAnnouncement)(nil),    // 23: radio.SongRequestAnnouncement
	(*UserAnnouncement)(nil),           // 24: radio.UserAnnouncement
	(*StreamerResponse)(nil),           // 25: radio.StreamerResponse
	(*QueueID)(nil),                    // 26: radio.QueueID
	(*QueueEntry)(nil),                 // 27: radio.QueueEntry
	(*QueueInfo)(nil),                  // 28: radio.QueueInfo
	(*SongRequest)(nil),                // 29: radio.SongRequest
	(*RequestResponse)(nil),            // 30: radio.RequestResponse
	(*Error)(nil),                      // 31: radio.Error
	(*TrackerRemoveClientRequest)(nil), // 32: radio.TrackerRemoveClientRequest
	(*Listeners)(nil),                  // 33: radio.Listeners
	(*Listener)(nil),                   // 34: radio.Listener
	(*durationpb.Duration)(nil),        // 35: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),      // 36: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),              // 37: google.protobuf.Empty
	(*wrapperspb.StringValue)(nil),     // 38: google.protobuf.StringValue
	(*wrapperspb.Int64Value)(nil),      // 39: google.protobuf.Int64Value
	(*wrapperspb.BoolValue)(nil),       // 40: google.protobuf.BoolValue
}
var file_radio_proto_depIdxs = []int32{
	35, // 0: radio.Song.length:type_name -> google.protobuf.Duration
	36, // 1: radio.Song.last_played:type_name -> google.protobuf.Timestamp
	19, // 2: radio.Song.last_played_by:type_name -> radio.User
	36, // 3: radio.Song.last_requested:type_name -> google.protobuf.Timestamp
	35, // 4: radio.Song.request_delay:type_name -> google.protobuf.Duration
	36, // 5: radio.Song.sync_time:type_name -> google.protobuf.Timestamp
	19, // 6: radio.GuestCreateResponse.user:type_name -> radio.User
	19, // 7: radio.GuestAuthResponse.user:type_name -> radio.User
	5,  // 8: radio.GuestCanDo.user:type_name -> radio.GuestUser
	0,  // 9: radio.GuestCanDo.action:type_name -> radio.GuestAction
	10, // 10: radio.ProxyListResponse.sources:type_name -> radio.ProxySource
	10, // 11: radio.ProxyStatusEvent.connections:type_name -> radio.ProxySource
	19, // 12: radio.ProxySource.user:type_name -> radio.User
	12, // 13: radio.ProxySource.ID:type_name -> radio.SourceID
	36, // 14: radio.ProxySource.start_time:type_name -> google.protobuf.Timestamp
	19, // 15: radio.ProxySourceEvent.user:type_name -> radio.User
	1,  // 16: radio.ProxySourceEvent.event:type_name -> radio.ProxySourceEventType
	12, // 17: radio.ProxySourceEvent.ID:type_name -> radio.SourceID
	19, // 18: radio.ProxyMetadataEvent.user:type_name -> radio.User
	19, // 19: radio.StatusResponse.user:type_name -> radio.User
	2,  // 20: radio.StatusResponse.song:type_name -> radio.Song
	16, // 21: radio.StatusResponse.info:type_name -> radio.SongInfo
	21, // 22: radio.StatusResponse.listener_info:type_name -> radio.ListenerInfo
	17, // 23: radio.StatusResponse.streamer_config:type_name -> radio.StreamerConfig
	19, // 24: radio.StatusResponse.stream_user:type_name -> radio.User
	2,  // 25: radio.SongUpdate.song:type_name -> radio.Song
	16, // 26: radio.SongUpdate.info:type_name -> radio.SongInfo
	36, // 27: radio.SongInfo.start_time:type_name -> google.protobuf.Timestamp
	36, // 28: radio.SongInfo.end_time:type_name -> google.protobuf.Timestamp
	19, // 29: radio.UserUpdate.user:type_name -> radio.User
	36, // 30: radio.User.updated_at:type_name -> google.protobuf.Timestamp
	36, // 31: radio.User.deleted_at:type_name -> google.protobuf.Timestamp
	36, // 32: radio.User.created_at:type_name -> google.protobuf.Timestamp
	20, // 33: radio.User.dj:type_name -> radio.DJ
	2,  // 34: radio.SongAnnouncement.song:type_name -> radio.Song
	16, // 35: radio.SongAnnouncement.info:type_name -> radio.SongInfo
	21, // 36: radio.SongAnnouncement.listener_info:type_name -> radio.ListenerInfo
	2,  // 37: radio.SongRequestAnnouncement.song:type_name -> radio.Song
	19, // 38: radio.UserAnnouncement.user:type_name -> radio.User
	31, // 39: radio.StreamerResponse.error:type_name -> radio.Error
	2,  // 40: radio.QueueEntry.song:type_name -> radio.Song
	36, // 41: radio.QueueEntry.expected_start_time:type_name -> google.protobuf.Timestamp
	26, // 42: radio.QueueEntry.queue_id:type_name -> radio.QueueID
	27, // 43: radio.QueueInfo.entries:type_name -> radio.QueueEntry
	2,  // 44: radio.SongRequest.song:type_name -> radio.Song
	31, // 45: radio.RequestResponse.error:type_name -> radio.Error
	35, // 46: radio.Error.delay:type_name -> google.protobuf.Duration
	34, // 47: radio.Listeners.entries:type_name -> radio.Listener
	36, // 48: radio.Listener.start:type_name -> google.protobuf.Timestamp
	37, // 49: radio.Manager.CurrentStatus:input_type -> google.protobuf.Empty
	37, // 50: radio.Manager.UpdateFromStorage:input_type -> google.protobuf.Empty
	37, // 51: radio.Manager.CurrentSong:input_type -> google.protobuf.Empty
	15, // 52: radio.Manager.UpdateSong:input_type -> radio.SongUpdate
	37, // 53: radio.Manager.CurrentThread:input_type -> google.protobuf.Empty
	38, // 54: radio.Manager.UpdateThread:input_type -> google.protobuf.StringValue
	37, // 55: radio.Manager.CurrentUser:input_type -> google.protobuf.Empty
	19, // 56: radio.Manager.UpdateUser:input_type -> radio.User
	37, // 57: radio.Manager.CurrentListenerCount:input_type -> google.protobuf.Empty
	39, // 58: radio.Manager.UpdateListenerCount:input_type -> google.protobuf.Int64Value
	5,  // 59: radio.Guest.Create:input_type -> radio.GuestUser
	5,  // 60: radio.Guest.Auth:input_type -> radio.GuestUser
	5,  // 61: radio.Guest.Deauth:input_type -> radio.GuestUser
	6,  // 62: radio.Guest.CanDo:input_type -> radio.GuestCanDo
	37, // 63: radio.Proxy.SourceStream:input_type -> google.protobuf.Empty
	37, // 64: radio.Proxy.MetadataStream:input_type -> google.protobuf.Empty
	8,  // 65: radio.Proxy.StatusStream:input_type -> radio.ProxyStatusRequest
	12, // 66: radio.Proxy.KickSource:input_type -> radio.SourceID
	37, // 67: radio.Proxy.ListSources:input_type -> google.protobuf.Empty
	22, // 68: radio.Announcer.AnnounceSong:input_type -> radio.SongAnnouncement
	23, // 69: radio.Announcer.AnnounceRequest:input_type -> radio.SongRequestAnnouncement
	24, // 70: radio.Announcer.AnnounceUser:input_type -> radio.UserAnnouncement
	37, // 71: radio.Streamer.Start:input_type -> google.protobuf.Empty
	40, // 72: radio.Streamer.Stop:input_type -> google.protobuf.BoolValue
	29, // 73: radio.Streamer.RequestSong:input_type -> radio.SongRequest
	17, // 74: radio.Streamer.SetConfig:input_type -> radio.StreamerConfig
	37, // 75: radio.Streamer.Queue:input_type -> google.protobuf.Empty
	27, // 76: radio.Queue.AddRequest:input_type -> radio.QueueEntry
	37, // 77: radio.Queue.ReserveNext:input_type -> google.protobuf.Empty
	37, // 78: radio.Queue.ResetReserved:input_type -> google.protobuf.Empty
	26, // 79: radio.Queue.Remove:input_type -> radio.QueueID
	37, // 80: radio.Queue.Entries:input_type -> google.protobuf.Empty
	37, // 81: radio.ListenerTracker.ListClients:input_type -> google.protobuf.Empty
	32, // 82: radio.ListenerTracker.RemoveClient:input_type -> radio.TrackerRemoveClientRequest
	14, // 83: radio.Manager.CurrentStatus:output_type -> radio.StatusResponse
	37, // 84: radio.Manager.UpdateFromStorage:output_type -> google.protobuf.Empty
	15, // 85: radio.Manager.CurrentSong:output_type -> radio.SongUpdate
	37, // 86: radio.Manager.UpdateSong:output_type -> google.protobuf.Empty
	38, // 87: radio.Manager.CurrentThread:output_type -> google.protobuf.StringValue
	37, // 88: radio.Manager.UpdateThread:output_type -> google.protobuf.Empty
	19, // 89: radio.Manager.CurrentUser:output_type -> radio.User
	37, // 90: radio.Manager.UpdateUser:output_type -> google.protobuf.Empty
	39, // 91: radio.Manager.CurrentListenerCount:output_type -> google.protobuf.Int64Value
	37, // 92: radio.Manager.UpdateListenerCount:output_type -> google.protobuf.Empty
	3,  // 93: radio.Guest.Create:output_type -> radio.GuestCreateResponse
	4,  // 94: radio.Guest.Auth:output_type -> radio.GuestAuthResponse
	37, // 95: radio.Guest.Deauth:output_type -> google.protobuf.Empty
	40, // 96: radio.Guest.CanDo:output_type -> google.protobuf.BoolValue
	11, // 97: radio.Proxy.SourceStream:output_type -> radio.ProxySourceEvent
	13, // 98: radio.Proxy.MetadataStream:output_type -> radio.ProxyMetadataEvent
	9,  // 99: radio.Proxy.StatusStream:output_type -> radio.ProxyStatusEvent
	37, // 100: radio.Proxy.KickSource:output_type -> google.protobuf.Empty
	7,  // 101: radio.Proxy.ListSources:output_type -> radio.ProxyListResponse
	37, // 102: radio.Announcer.AnnounceSong:output_type -> google.protobuf.Empty
	37, // 103: radio.Announcer.AnnounceRequest:output_type -> google.protobuf.Empty
	37, // 104: radio.Announcer.AnnounceUser:output_type -> google.protobuf.Empty
	25, // 105: radio.Streamer.Start:output_type -> radio.StreamerResponse
	25, // 106: radio.Streamer.Stop:output_type -> radio.StreamerResponse
	30, // 107: radio.Streamer.RequestSong:output_type -> radio.RequestResponse
	37, // 108: radio.Streamer.SetConfig:output_type -> google.protobuf.Empty
	28, // 109: radio.Streamer.Queue:output_type -> radio.QueueInfo
	37, // 110: radio.Queue.AddRequest:output_type -> google.protobuf.Empty
	27, // 111: radio.Queue.ReserveNext:output_type -> radio.QueueEntry
	37, // 112: radio.Queue.ResetReserved:output_type -> google.protobuf.Empty
	40, // 113: radio.Queue.Remove:output_type -> google.protobuf.BoolValue
	28, // 114: radio.Queue.Entries:output_type -> radio.QueueInfo
	33, // 115: radio.ListenerTracker.ListClients:output_type -> radio.Listeners
	37, // 116: radio.ListenerTracker.RemoveClient:output_type -> google.protobuf.Empty
	83, // [83:117] is the sub-list for method output_type
	49, // [49:83] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_radio_proto_init() }
func file_radio_proto_init() {
	if File_radio_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_radio_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   7,
		},
		GoTypes:           file_radio_proto_goTypes,
		DependencyIndexes: file_radio_proto_depIdxs,
		EnumInfos:         file_radio_proto_enumTypes,
		MessageInfos:      file_radio_proto_msgTypes,
	}.Build()
	File_radio_proto = out.File
	file_radio_proto_rawDesc = nil
	file_radio_proto_goTypes = nil
	file_radio_proto_depIdxs = nil
}
