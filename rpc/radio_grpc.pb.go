// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: radio.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_CurrentStatus_FullMethodName        = "/radio.Manager/CurrentStatus"
	Manager_CurrentSong_FullMethodName          = "/radio.Manager/CurrentSong"
	Manager_UpdateSong_FullMethodName           = "/radio.Manager/UpdateSong"
	Manager_CurrentThread_FullMethodName        = "/radio.Manager/CurrentThread"
	Manager_UpdateThread_FullMethodName         = "/radio.Manager/UpdateThread"
	Manager_CurrentUser_FullMethodName          = "/radio.Manager/CurrentUser"
	Manager_UpdateUser_FullMethodName           = "/radio.Manager/UpdateUser"
	Manager_CurrentListenerCount_FullMethodName = "/radio.Manager/CurrentListenerCount"
	Manager_UpdateListenerCount_FullMethodName  = "/radio.Manager/UpdateListenerCount"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CurrentStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Manager_CurrentStatusClient, error)
	CurrentSong(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Manager_CurrentSongClient, error)
	UpdateSong(ctx context.Context, in *SongUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CurrentThread(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Manager_CurrentThreadClient, error)
	UpdateThread(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CurrentUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Manager_CurrentUserClient, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CurrentListenerCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Manager_CurrentListenerCountClient, error)
	UpdateListenerCount(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CurrentStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Manager_CurrentStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &Manager_ServiceDesc.Streams[0], Manager_CurrentStatus_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &managerCurrentStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Manager_CurrentStatusClient interface {
	Recv() (*StatusResponse, error)
	grpc.ClientStream
}

type managerCurrentStatusClient struct {
	grpc.ClientStream
}

func (x *managerCurrentStatusClient) Recv() (*StatusResponse, error) {
	m := new(StatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managerClient) CurrentSong(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Manager_CurrentSongClient, error) {
	stream, err := c.cc.NewStream(ctx, &Manager_ServiceDesc.Streams[1], Manager_CurrentSong_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &managerCurrentSongClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Manager_CurrentSongClient interface {
	Recv() (*SongUpdate, error)
	grpc.ClientStream
}

type managerCurrentSongClient struct {
	grpc.ClientStream
}

func (x *managerCurrentSongClient) Recv() (*SongUpdate, error) {
	m := new(SongUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managerClient) UpdateSong(ctx context.Context, in *SongUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Manager_UpdateSong_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CurrentThread(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Manager_CurrentThreadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Manager_ServiceDesc.Streams[2], Manager_CurrentThread_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &managerCurrentThreadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Manager_CurrentThreadClient interface {
	Recv() (*wrapperspb.StringValue, error)
	grpc.ClientStream
}

type managerCurrentThreadClient struct {
	grpc.ClientStream
}

func (x *managerCurrentThreadClient) Recv() (*wrapperspb.StringValue, error) {
	m := new(wrapperspb.StringValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managerClient) UpdateThread(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Manager_UpdateThread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CurrentUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Manager_CurrentUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &Manager_ServiceDesc.Streams[3], Manager_CurrentUser_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &managerCurrentUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Manager_CurrentUserClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type managerCurrentUserClient struct {
	grpc.ClientStream
}

func (x *managerCurrentUserClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managerClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Manager_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CurrentListenerCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Manager_CurrentListenerCountClient, error) {
	stream, err := c.cc.NewStream(ctx, &Manager_ServiceDesc.Streams[4], Manager_CurrentListenerCount_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &managerCurrentListenerCountClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Manager_CurrentListenerCountClient interface {
	Recv() (*wrapperspb.Int64Value, error)
	grpc.ClientStream
}

type managerCurrentListenerCountClient struct {
	grpc.ClientStream
}

func (x *managerCurrentListenerCountClient) Recv() (*wrapperspb.Int64Value, error) {
	m := new(wrapperspb.Int64Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managerClient) UpdateListenerCount(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Manager_UpdateListenerCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CurrentStatus(*emptypb.Empty, Manager_CurrentStatusServer) error
	CurrentSong(*emptypb.Empty, Manager_CurrentSongServer) error
	UpdateSong(context.Context, *SongUpdate) (*emptypb.Empty, error)
	CurrentThread(*emptypb.Empty, Manager_CurrentThreadServer) error
	UpdateThread(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	CurrentUser(*emptypb.Empty, Manager_CurrentUserServer) error
	UpdateUser(context.Context, *User) (*emptypb.Empty, error)
	CurrentListenerCount(*emptypb.Empty, Manager_CurrentListenerCountServer) error
	UpdateListenerCount(context.Context, *wrapperspb.Int64Value) (*emptypb.Empty, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CurrentStatus(*emptypb.Empty, Manager_CurrentStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method CurrentStatus not implemented")
}
func (UnimplementedManagerServer) CurrentSong(*emptypb.Empty, Manager_CurrentSongServer) error {
	return status.Errorf(codes.Unimplemented, "method CurrentSong not implemented")
}
func (UnimplementedManagerServer) UpdateSong(context.Context, *SongUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSong not implemented")
}
func (UnimplementedManagerServer) CurrentThread(*emptypb.Empty, Manager_CurrentThreadServer) error {
	return status.Errorf(codes.Unimplemented, "method CurrentThread not implemented")
}
func (UnimplementedManagerServer) UpdateThread(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateThread not implemented")
}
func (UnimplementedManagerServer) CurrentUser(*emptypb.Empty, Manager_CurrentUserServer) error {
	return status.Errorf(codes.Unimplemented, "method CurrentUser not implemented")
}
func (UnimplementedManagerServer) UpdateUser(context.Context, *User) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedManagerServer) CurrentListenerCount(*emptypb.Empty, Manager_CurrentListenerCountServer) error {
	return status.Errorf(codes.Unimplemented, "method CurrentListenerCount not implemented")
}
func (UnimplementedManagerServer) UpdateListenerCount(context.Context, *wrapperspb.Int64Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateListenerCount not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CurrentStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServer).CurrentStatus(m, &managerCurrentStatusServer{stream})
}

type Manager_CurrentStatusServer interface {
	Send(*StatusResponse) error
	grpc.ServerStream
}

type managerCurrentStatusServer struct {
	grpc.ServerStream
}

func (x *managerCurrentStatusServer) Send(m *StatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Manager_CurrentSong_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServer).CurrentSong(m, &managerCurrentSongServer{stream})
}

type Manager_CurrentSongServer interface {
	Send(*SongUpdate) error
	grpc.ServerStream
}

type managerCurrentSongServer struct {
	grpc.ServerStream
}

func (x *managerCurrentSongServer) Send(m *SongUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _Manager_UpdateSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpdateSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateSong(ctx, req.(*SongUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CurrentThread_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServer).CurrentThread(m, &managerCurrentThreadServer{stream})
}

type Manager_CurrentThreadServer interface {
	Send(*wrapperspb.StringValue) error
	grpc.ServerStream
}

type managerCurrentThreadServer struct {
	grpc.ServerStream
}

func (x *managerCurrentThreadServer) Send(m *wrapperspb.StringValue) error {
	return x.ServerStream.SendMsg(m)
}

func _Manager_UpdateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpdateThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateThread(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CurrentUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServer).CurrentUser(m, &managerCurrentUserServer{stream})
}

type Manager_CurrentUserServer interface {
	Send(*User) error
	grpc.ServerStream
}

type managerCurrentUserServer struct {
	grpc.ServerStream
}

func (x *managerCurrentUserServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _Manager_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CurrentListenerCount_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServer).CurrentListenerCount(m, &managerCurrentListenerCountServer{stream})
}

type Manager_CurrentListenerCountServer interface {
	Send(*wrapperspb.Int64Value) error
	grpc.ServerStream
}

type managerCurrentListenerCountServer struct {
	grpc.ServerStream
}

func (x *managerCurrentListenerCountServer) Send(m *wrapperspb.Int64Value) error {
	return x.ServerStream.SendMsg(m)
}

func _Manager_UpdateListenerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateListenerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpdateListenerCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateListenerCount(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "radio.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateSong",
			Handler:    _Manager_UpdateSong_Handler,
		},
		{
			MethodName: "UpdateThread",
			Handler:    _Manager_UpdateThread_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Manager_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateListenerCount",
			Handler:    _Manager_UpdateListenerCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CurrentStatus",
			Handler:       _Manager_CurrentStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CurrentSong",
			Handler:       _Manager_CurrentSong_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CurrentThread",
			Handler:       _Manager_CurrentThread_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CurrentUser",
			Handler:       _Manager_CurrentUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CurrentListenerCount",
			Handler:       _Manager_CurrentListenerCount_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "radio.proto",
}

const (
	Announcer_AnnounceSong_FullMethodName    = "/radio.Announcer/AnnounceSong"
	Announcer_AnnounceRequest_FullMethodName = "/radio.Announcer/AnnounceRequest"
	Announcer_AnnounceUser_FullMethodName    = "/radio.Announcer/AnnounceUser"
)

// AnnouncerClient is the client API for Announcer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnnouncerClient interface {
	AnnounceSong(ctx context.Context, in *SongAnnouncement, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AnnounceRequest(ctx context.Context, in *SongRequestAnnouncement, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AnnounceUser(ctx context.Context, in *UserAnnouncement, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type announcerClient struct {
	cc grpc.ClientConnInterface
}

func NewAnnouncerClient(cc grpc.ClientConnInterface) AnnouncerClient {
	return &announcerClient{cc}
}

func (c *announcerClient) AnnounceSong(ctx context.Context, in *SongAnnouncement, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Announcer_AnnounceSong_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcerClient) AnnounceRequest(ctx context.Context, in *SongRequestAnnouncement, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Announcer_AnnounceRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcerClient) AnnounceUser(ctx context.Context, in *UserAnnouncement, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Announcer_AnnounceUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnnouncerServer is the server API for Announcer service.
// All implementations must embed UnimplementedAnnouncerServer
// for forward compatibility
type AnnouncerServer interface {
	AnnounceSong(context.Context, *SongAnnouncement) (*emptypb.Empty, error)
	AnnounceRequest(context.Context, *SongRequestAnnouncement) (*emptypb.Empty, error)
	AnnounceUser(context.Context, *UserAnnouncement) (*emptypb.Empty, error)
	mustEmbedUnimplementedAnnouncerServer()
}

// UnimplementedAnnouncerServer must be embedded to have forward compatible implementations.
type UnimplementedAnnouncerServer struct {
}

func (UnimplementedAnnouncerServer) AnnounceSong(context.Context, *SongAnnouncement) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnounceSong not implemented")
}
func (UnimplementedAnnouncerServer) AnnounceRequest(context.Context, *SongRequestAnnouncement) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnounceRequest not implemented")
}
func (UnimplementedAnnouncerServer) AnnounceUser(context.Context, *UserAnnouncement) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnounceUser not implemented")
}
func (UnimplementedAnnouncerServer) mustEmbedUnimplementedAnnouncerServer() {}

// UnsafeAnnouncerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnnouncerServer will
// result in compilation errors.
type UnsafeAnnouncerServer interface {
	mustEmbedUnimplementedAnnouncerServer()
}

func RegisterAnnouncerServer(s grpc.ServiceRegistrar, srv AnnouncerServer) {
	s.RegisterService(&Announcer_ServiceDesc, srv)
}

func _Announcer_AnnounceSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongAnnouncement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncerServer).AnnounceSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Announcer_AnnounceSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncerServer).AnnounceSong(ctx, req.(*SongAnnouncement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Announcer_AnnounceRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongRequestAnnouncement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncerServer).AnnounceRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Announcer_AnnounceRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncerServer).AnnounceRequest(ctx, req.(*SongRequestAnnouncement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Announcer_AnnounceUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAnnouncement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncerServer).AnnounceUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Announcer_AnnounceUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncerServer).AnnounceUser(ctx, req.(*UserAnnouncement))
	}
	return interceptor(ctx, in, info, handler)
}

// Announcer_ServiceDesc is the grpc.ServiceDesc for Announcer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Announcer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "radio.Announcer",
	HandlerType: (*AnnouncerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnnounceSong",
			Handler:    _Announcer_AnnounceSong_Handler,
		},
		{
			MethodName: "AnnounceRequest",
			Handler:    _Announcer_AnnounceRequest_Handler,
		},
		{
			MethodName: "AnnounceUser",
			Handler:    _Announcer_AnnounceUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "radio.proto",
}

const (
	Streamer_Start_FullMethodName       = "/radio.Streamer/Start"
	Streamer_Stop_FullMethodName        = "/radio.Streamer/Stop"
	Streamer_RequestSong_FullMethodName = "/radio.Streamer/RequestSong"
	Streamer_SetConfig_FullMethodName   = "/radio.Streamer/SetConfig"
	Streamer_Queue_FullMethodName       = "/radio.Streamer/Queue"
)

// StreamerClient is the client API for Streamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamerClient interface {
	// Start starts the streamer
	Start(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StreamerResponse, error)
	// Stop stops the streamer, the boolean argument indicates if we should stop
	// right away, or wait until the current song ends
	Stop(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*StreamerResponse, error)
	// RequestSong requests a song to be played by the streamer
	RequestSong(ctx context.Context, in *SongRequest, opts ...grpc.CallOption) (*RequestResponse, error)
	// SetConfig changes the configuration of the streamer
	SetConfig(ctx context.Context, in *StreamerConfig, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Queue returns the current queue contents of the streamer
	Queue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*QueueInfo, error)
}

type streamerClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamerClient(cc grpc.ClientConnInterface) StreamerClient {
	return &streamerClient{cc}
}

func (c *streamerClient) Start(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StreamerResponse, error) {
	out := new(StreamerResponse)
	err := c.cc.Invoke(ctx, Streamer_Start_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerClient) Stop(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*StreamerResponse, error) {
	out := new(StreamerResponse)
	err := c.cc.Invoke(ctx, Streamer_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerClient) RequestSong(ctx context.Context, in *SongRequest, opts ...grpc.CallOption) (*RequestResponse, error) {
	out := new(RequestResponse)
	err := c.cc.Invoke(ctx, Streamer_RequestSong_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerClient) SetConfig(ctx context.Context, in *StreamerConfig, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Streamer_SetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerClient) Queue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*QueueInfo, error) {
	out := new(QueueInfo)
	err := c.cc.Invoke(ctx, Streamer_Queue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamerServer is the server API for Streamer service.
// All implementations must embed UnimplementedStreamerServer
// for forward compatibility
type StreamerServer interface {
	// Start starts the streamer
	Start(context.Context, *emptypb.Empty) (*StreamerResponse, error)
	// Stop stops the streamer, the boolean argument indicates if we should stop
	// right away, or wait until the current song ends
	Stop(context.Context, *wrapperspb.BoolValue) (*StreamerResponse, error)
	// RequestSong requests a song to be played by the streamer
	RequestSong(context.Context, *SongRequest) (*RequestResponse, error)
	// SetConfig changes the configuration of the streamer
	SetConfig(context.Context, *StreamerConfig) (*emptypb.Empty, error)
	// Queue returns the current queue contents of the streamer
	Queue(context.Context, *emptypb.Empty) (*QueueInfo, error)
	mustEmbedUnimplementedStreamerServer()
}

// UnimplementedStreamerServer must be embedded to have forward compatible implementations.
type UnimplementedStreamerServer struct {
}

func (UnimplementedStreamerServer) Start(context.Context, *emptypb.Empty) (*StreamerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedStreamerServer) Stop(context.Context, *wrapperspb.BoolValue) (*StreamerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedStreamerServer) RequestSong(context.Context, *SongRequest) (*RequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSong not implemented")
}
func (UnimplementedStreamerServer) SetConfig(context.Context, *StreamerConfig) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedStreamerServer) Queue(context.Context, *emptypb.Empty) (*QueueInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Queue not implemented")
}
func (UnimplementedStreamerServer) mustEmbedUnimplementedStreamerServer() {}

// UnsafeStreamerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamerServer will
// result in compilation errors.
type UnsafeStreamerServer interface {
	mustEmbedUnimplementedStreamerServer()
}

func RegisterStreamerServer(s grpc.ServiceRegistrar, srv StreamerServer) {
	s.RegisterService(&Streamer_ServiceDesc, srv)
}

func _Streamer_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Streamer_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamerServer).Start(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Streamer_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.BoolValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Streamer_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamerServer).Stop(ctx, req.(*wrapperspb.BoolValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Streamer_RequestSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamerServer).RequestSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Streamer_RequestSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamerServer).RequestSong(ctx, req.(*SongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Streamer_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamerConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamerServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Streamer_SetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamerServer).SetConfig(ctx, req.(*StreamerConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Streamer_Queue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamerServer).Queue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Streamer_Queue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamerServer).Queue(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Streamer_ServiceDesc is the grpc.ServiceDesc for Streamer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Streamer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "radio.Streamer",
	HandlerType: (*StreamerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Streamer_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Streamer_Stop_Handler,
		},
		{
			MethodName: "RequestSong",
			Handler:    _Streamer_RequestSong_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _Streamer_SetConfig_Handler,
		},
		{
			MethodName: "Queue",
			Handler:    _Streamer_Queue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "radio.proto",
}

const (
	Queue_AddRequest_FullMethodName    = "/radio.Queue/AddRequest"
	Queue_ReserveNext_FullMethodName   = "/radio.Queue/ReserveNext"
	Queue_ResetReserved_FullMethodName = "/radio.Queue/ResetReserved"
	Queue_Remove_FullMethodName        = "/radio.Queue/Remove"
	Queue_Entries_FullMethodName       = "/radio.Queue/Entries"
)

// QueueClient is the client API for Queue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueClient interface {
	AddRequest(ctx context.Context, in *QueueEntry, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReserveNext(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*QueueEntry, error)
	ResetReserved(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Remove(ctx context.Context, in *QueueID, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	Entries(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*QueueInfo, error)
}

type queueClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueClient(cc grpc.ClientConnInterface) QueueClient {
	return &queueClient{cc}
}

func (c *queueClient) AddRequest(ctx context.Context, in *QueueEntry, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Queue_AddRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) ReserveNext(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*QueueEntry, error) {
	out := new(QueueEntry)
	err := c.cc.Invoke(ctx, Queue_ReserveNext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) ResetReserved(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Queue_ResetReserved_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) Remove(ctx context.Context, in *QueueID, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, Queue_Remove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) Entries(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*QueueInfo, error) {
	out := new(QueueInfo)
	err := c.cc.Invoke(ctx, Queue_Entries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueServer is the server API for Queue service.
// All implementations must embed UnimplementedQueueServer
// for forward compatibility
type QueueServer interface {
	AddRequest(context.Context, *QueueEntry) (*emptypb.Empty, error)
	ReserveNext(context.Context, *emptypb.Empty) (*QueueEntry, error)
	ResetReserved(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Remove(context.Context, *QueueID) (*wrapperspb.BoolValue, error)
	Entries(context.Context, *emptypb.Empty) (*QueueInfo, error)
	mustEmbedUnimplementedQueueServer()
}

// UnimplementedQueueServer must be embedded to have forward compatible implementations.
type UnimplementedQueueServer struct {
}

func (UnimplementedQueueServer) AddRequest(context.Context, *QueueEntry) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRequest not implemented")
}
func (UnimplementedQueueServer) ReserveNext(context.Context, *emptypb.Empty) (*QueueEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveNext not implemented")
}
func (UnimplementedQueueServer) ResetReserved(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetReserved not implemented")
}
func (UnimplementedQueueServer) Remove(context.Context, *QueueID) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedQueueServer) Entries(context.Context, *emptypb.Empty) (*QueueInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Entries not implemented")
}
func (UnimplementedQueueServer) mustEmbedUnimplementedQueueServer() {}

// UnsafeQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueServer will
// result in compilation errors.
type UnsafeQueueServer interface {
	mustEmbedUnimplementedQueueServer()
}

func RegisterQueueServer(s grpc.ServiceRegistrar, srv QueueServer) {
	s.RegisterService(&Queue_ServiceDesc, srv)
}

func _Queue_AddRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).AddRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Queue_AddRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).AddRequest(ctx, req.(*QueueEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_ReserveNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).ReserveNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Queue_ReserveNext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).ReserveNext(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_ResetReserved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).ResetReserved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Queue_ResetReserved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).ResetReserved(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Queue_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).Remove(ctx, req.(*QueueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_Entries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).Entries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Queue_Entries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).Entries(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Queue_ServiceDesc is the grpc.ServiceDesc for Queue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Queue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "radio.Queue",
	HandlerType: (*QueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRequest",
			Handler:    _Queue_AddRequest_Handler,
		},
		{
			MethodName: "ReserveNext",
			Handler:    _Queue_ReserveNext_Handler,
		},
		{
			MethodName: "ResetReserved",
			Handler:    _Queue_ResetReserved_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Queue_Remove_Handler,
		},
		{
			MethodName: "Entries",
			Handler:    _Queue_Entries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "radio.proto",
}

const (
	ListenerTracker_ListClients_FullMethodName  = "/radio.ListenerTracker/ListClients"
	ListenerTracker_RemoveClient_FullMethodName = "/radio.ListenerTracker/RemoveClient"
)

// ListenerTrackerClient is the client API for ListenerTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListenerTrackerClient interface {
	ListClients(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Listeners, error)
	RemoveClient(ctx context.Context, in *TrackerRemoveClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type listenerTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewListenerTrackerClient(cc grpc.ClientConnInterface) ListenerTrackerClient {
	return &listenerTrackerClient{cc}
}

func (c *listenerTrackerClient) ListClients(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Listeners, error) {
	out := new(Listeners)
	err := c.cc.Invoke(ctx, ListenerTracker_ListClients_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerTrackerClient) RemoveClient(ctx context.Context, in *TrackerRemoveClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ListenerTracker_RemoveClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListenerTrackerServer is the server API for ListenerTracker service.
// All implementations must embed UnimplementedListenerTrackerServer
// for forward compatibility
type ListenerTrackerServer interface {
	ListClients(context.Context, *emptypb.Empty) (*Listeners, error)
	RemoveClient(context.Context, *TrackerRemoveClientRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedListenerTrackerServer()
}

// UnimplementedListenerTrackerServer must be embedded to have forward compatible implementations.
type UnimplementedListenerTrackerServer struct {
}

func (UnimplementedListenerTrackerServer) ListClients(context.Context, *emptypb.Empty) (*Listeners, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClients not implemented")
}
func (UnimplementedListenerTrackerServer) RemoveClient(context.Context, *TrackerRemoveClientRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveClient not implemented")
}
func (UnimplementedListenerTrackerServer) mustEmbedUnimplementedListenerTrackerServer() {}

// UnsafeListenerTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListenerTrackerServer will
// result in compilation errors.
type UnsafeListenerTrackerServer interface {
	mustEmbedUnimplementedListenerTrackerServer()
}

func RegisterListenerTrackerServer(s grpc.ServiceRegistrar, srv ListenerTrackerServer) {
	s.RegisterService(&ListenerTracker_ServiceDesc, srv)
}

func _ListenerTracker_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerTrackerServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListenerTracker_ListClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerTrackerServer).ListClients(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListenerTracker_RemoveClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackerRemoveClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerTrackerServer).RemoveClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListenerTracker_RemoveClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerTrackerServer).RemoveClient(ctx, req.(*TrackerRemoveClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListenerTracker_ServiceDesc is the grpc.ServiceDesc for ListenerTracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListenerTracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "radio.ListenerTracker",
	HandlerType: (*ListenerTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListClients",
			Handler:    _ListenerTracker_ListClients_Handler,
		},
		{
			MethodName: "RemoveClient",
			Handler:    _ListenerTracker_RemoveClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "radio.proto",
}
