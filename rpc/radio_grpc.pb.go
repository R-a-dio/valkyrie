// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: radio.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_Status_FullMethodName            = "/radio.Manager/Status"
	Manager_SetUser_FullMethodName           = "/radio.Manager/SetUser"
	Manager_SetSong_FullMethodName           = "/radio.Manager/SetSong"
	Manager_SetStreamerConfig_FullMethodName = "/radio.Manager/SetStreamerConfig"
	Manager_SetThread_FullMethodName         = "/radio.Manager/SetThread"
	Manager_SetListenerInfo_FullMethodName   = "/radio.Manager/SetListenerInfo"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	// Status returns the current status
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	SetUser(ctx context.Context, in *UserUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetSong(ctx context.Context, in *SongUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetStreamerConfig(ctx context.Context, in *StreamerConfig, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetThread(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetListenerInfo(ctx context.Context, in *ListenerInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Manager_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) SetUser(ctx context.Context, in *UserUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Manager_SetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) SetSong(ctx context.Context, in *SongUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Manager_SetSong_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) SetStreamerConfig(ctx context.Context, in *StreamerConfig, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Manager_SetStreamerConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) SetThread(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Manager_SetThread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) SetListenerInfo(ctx context.Context, in *ListenerInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Manager_SetListenerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	// Status returns the current status
	Status(context.Context, *emptypb.Empty) (*StatusResponse, error)
	SetUser(context.Context, *UserUpdate) (*emptypb.Empty, error)
	SetSong(context.Context, *SongUpdate) (*emptypb.Empty, error)
	SetStreamerConfig(context.Context, *StreamerConfig) (*emptypb.Empty, error)
	SetThread(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	SetListenerInfo(context.Context, *ListenerInfo) (*emptypb.Empty, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) Status(context.Context, *emptypb.Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedManagerServer) SetUser(context.Context, *UserUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUser not implemented")
}
func (UnimplementedManagerServer) SetSong(context.Context, *SongUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSong not implemented")
}
func (UnimplementedManagerServer) SetStreamerConfig(context.Context, *StreamerConfig) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStreamerConfig not implemented")
}
func (UnimplementedManagerServer) SetThread(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetThread not implemented")
}
func (UnimplementedManagerServer) SetListenerInfo(context.Context, *ListenerInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetListenerInfo not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_SetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).SetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_SetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).SetUser(ctx, req.(*UserUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_SetSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).SetSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_SetSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).SetSong(ctx, req.(*SongUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_SetStreamerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamerConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).SetStreamerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_SetStreamerConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).SetStreamerConfig(ctx, req.(*StreamerConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_SetThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).SetThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_SetThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).SetThread(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_SetListenerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).SetListenerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_SetListenerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).SetListenerInfo(ctx, req.(*ListenerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "radio.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Manager_Status_Handler,
		},
		{
			MethodName: "SetUser",
			Handler:    _Manager_SetUser_Handler,
		},
		{
			MethodName: "SetSong",
			Handler:    _Manager_SetSong_Handler,
		},
		{
			MethodName: "SetStreamerConfig",
			Handler:    _Manager_SetStreamerConfig_Handler,
		},
		{
			MethodName: "SetThread",
			Handler:    _Manager_SetThread_Handler,
		},
		{
			MethodName: "SetListenerInfo",
			Handler:    _Manager_SetListenerInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "radio.proto",
}

const (
	Announcer_AnnounceSong_FullMethodName    = "/radio.Announcer/AnnounceSong"
	Announcer_AnnounceRequest_FullMethodName = "/radio.Announcer/AnnounceRequest"
)

// AnnouncerClient is the client API for Announcer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnnouncerClient interface {
	AnnounceSong(ctx context.Context, in *SongAnnouncement, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AnnounceRequest(ctx context.Context, in *SongRequestAnnouncement, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type announcerClient struct {
	cc grpc.ClientConnInterface
}

func NewAnnouncerClient(cc grpc.ClientConnInterface) AnnouncerClient {
	return &announcerClient{cc}
}

func (c *announcerClient) AnnounceSong(ctx context.Context, in *SongAnnouncement, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Announcer_AnnounceSong_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcerClient) AnnounceRequest(ctx context.Context, in *SongRequestAnnouncement, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Announcer_AnnounceRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnnouncerServer is the server API for Announcer service.
// All implementations must embed UnimplementedAnnouncerServer
// for forward compatibility
type AnnouncerServer interface {
	AnnounceSong(context.Context, *SongAnnouncement) (*emptypb.Empty, error)
	AnnounceRequest(context.Context, *SongRequestAnnouncement) (*emptypb.Empty, error)
	mustEmbedUnimplementedAnnouncerServer()
}

// UnimplementedAnnouncerServer must be embedded to have forward compatible implementations.
type UnimplementedAnnouncerServer struct {
}

func (UnimplementedAnnouncerServer) AnnounceSong(context.Context, *SongAnnouncement) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnounceSong not implemented")
}
func (UnimplementedAnnouncerServer) AnnounceRequest(context.Context, *SongRequestAnnouncement) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnounceRequest not implemented")
}
func (UnimplementedAnnouncerServer) mustEmbedUnimplementedAnnouncerServer() {}

// UnsafeAnnouncerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnnouncerServer will
// result in compilation errors.
type UnsafeAnnouncerServer interface {
	mustEmbedUnimplementedAnnouncerServer()
}

func RegisterAnnouncerServer(s grpc.ServiceRegistrar, srv AnnouncerServer) {
	s.RegisterService(&Announcer_ServiceDesc, srv)
}

func _Announcer_AnnounceSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongAnnouncement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncerServer).AnnounceSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Announcer_AnnounceSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncerServer).AnnounceSong(ctx, req.(*SongAnnouncement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Announcer_AnnounceRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongRequestAnnouncement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncerServer).AnnounceRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Announcer_AnnounceRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncerServer).AnnounceRequest(ctx, req.(*SongRequestAnnouncement))
	}
	return interceptor(ctx, in, info, handler)
}

// Announcer_ServiceDesc is the grpc.ServiceDesc for Announcer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Announcer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "radio.Announcer",
	HandlerType: (*AnnouncerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnnounceSong",
			Handler:    _Announcer_AnnounceSong_Handler,
		},
		{
			MethodName: "AnnounceRequest",
			Handler:    _Announcer_AnnounceRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "radio.proto",
}

const (
	Streamer_Start_FullMethodName       = "/radio.Streamer/Start"
	Streamer_Stop_FullMethodName        = "/radio.Streamer/Stop"
	Streamer_RequestSong_FullMethodName = "/radio.Streamer/RequestSong"
	Streamer_SetConfig_FullMethodName   = "/radio.Streamer/SetConfig"
	Streamer_Queue_FullMethodName       = "/radio.Streamer/Queue"
)

// StreamerClient is the client API for Streamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamerClient interface {
	// Start starts the streamer
	Start(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StreamerResponse, error)
	// Stop stops the streamer, the boolean argument indicates if we should stop
	// right away, or wait until the current song ends
	Stop(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*StreamerResponse, error)
	// RequestSong requests a song to be played by the streamer
	RequestSong(ctx context.Context, in *SongRequest, opts ...grpc.CallOption) (*RequestResponse, error)
	// SetConfig changes the configuration of the streamer
	SetConfig(ctx context.Context, in *StreamerConfig, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Queue returns the current queue contents of the streamer
	Queue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*QueueInfo, error)
}

type streamerClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamerClient(cc grpc.ClientConnInterface) StreamerClient {
	return &streamerClient{cc}
}

func (c *streamerClient) Start(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StreamerResponse, error) {
	out := new(StreamerResponse)
	err := c.cc.Invoke(ctx, Streamer_Start_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerClient) Stop(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*StreamerResponse, error) {
	out := new(StreamerResponse)
	err := c.cc.Invoke(ctx, Streamer_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerClient) RequestSong(ctx context.Context, in *SongRequest, opts ...grpc.CallOption) (*RequestResponse, error) {
	out := new(RequestResponse)
	err := c.cc.Invoke(ctx, Streamer_RequestSong_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerClient) SetConfig(ctx context.Context, in *StreamerConfig, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Streamer_SetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerClient) Queue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*QueueInfo, error) {
	out := new(QueueInfo)
	err := c.cc.Invoke(ctx, Streamer_Queue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamerServer is the server API for Streamer service.
// All implementations must embed UnimplementedStreamerServer
// for forward compatibility
type StreamerServer interface {
	// Start starts the streamer
	Start(context.Context, *emptypb.Empty) (*StreamerResponse, error)
	// Stop stops the streamer, the boolean argument indicates if we should stop
	// right away, or wait until the current song ends
	Stop(context.Context, *wrapperspb.BoolValue) (*StreamerResponse, error)
	// RequestSong requests a song to be played by the streamer
	RequestSong(context.Context, *SongRequest) (*RequestResponse, error)
	// SetConfig changes the configuration of the streamer
	SetConfig(context.Context, *StreamerConfig) (*emptypb.Empty, error)
	// Queue returns the current queue contents of the streamer
	Queue(context.Context, *emptypb.Empty) (*QueueInfo, error)
	mustEmbedUnimplementedStreamerServer()
}

// UnimplementedStreamerServer must be embedded to have forward compatible implementations.
type UnimplementedStreamerServer struct {
}

func (UnimplementedStreamerServer) Start(context.Context, *emptypb.Empty) (*StreamerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedStreamerServer) Stop(context.Context, *wrapperspb.BoolValue) (*StreamerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedStreamerServer) RequestSong(context.Context, *SongRequest) (*RequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSong not implemented")
}
func (UnimplementedStreamerServer) SetConfig(context.Context, *StreamerConfig) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedStreamerServer) Queue(context.Context, *emptypb.Empty) (*QueueInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Queue not implemented")
}
func (UnimplementedStreamerServer) mustEmbedUnimplementedStreamerServer() {}

// UnsafeStreamerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamerServer will
// result in compilation errors.
type UnsafeStreamerServer interface {
	mustEmbedUnimplementedStreamerServer()
}

func RegisterStreamerServer(s grpc.ServiceRegistrar, srv StreamerServer) {
	s.RegisterService(&Streamer_ServiceDesc, srv)
}

func _Streamer_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Streamer_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamerServer).Start(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Streamer_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.BoolValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Streamer_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamerServer).Stop(ctx, req.(*wrapperspb.BoolValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Streamer_RequestSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamerServer).RequestSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Streamer_RequestSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamerServer).RequestSong(ctx, req.(*SongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Streamer_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamerConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamerServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Streamer_SetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamerServer).SetConfig(ctx, req.(*StreamerConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Streamer_Queue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamerServer).Queue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Streamer_Queue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamerServer).Queue(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Streamer_ServiceDesc is the grpc.ServiceDesc for Streamer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Streamer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "radio.Streamer",
	HandlerType: (*StreamerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Streamer_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Streamer_Stop_Handler,
		},
		{
			MethodName: "RequestSong",
			Handler:    _Streamer_RequestSong_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _Streamer_SetConfig_Handler,
		},
		{
			MethodName: "Queue",
			Handler:    _Streamer_Queue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "radio.proto",
}

const (
	Queue_AddRequest_FullMethodName  = "/radio.Queue/AddRequest"
	Queue_ReserveNext_FullMethodName = "/radio.Queue/ReserveNext"
	Queue_Remove_FullMethodName      = "/radio.Queue/Remove"
	Queue_Entries_FullMethodName     = "/radio.Queue/Entries"
)

// QueueClient is the client API for Queue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueClient interface {
	AddRequest(ctx context.Context, in *QueueEntry, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReserveNext(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*QueueEntry, error)
	Remove(ctx context.Context, in *QueueEntry, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	Entries(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*QueueInfo, error)
}

type queueClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueClient(cc grpc.ClientConnInterface) QueueClient {
	return &queueClient{cc}
}

func (c *queueClient) AddRequest(ctx context.Context, in *QueueEntry, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Queue_AddRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) ReserveNext(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*QueueEntry, error) {
	out := new(QueueEntry)
	err := c.cc.Invoke(ctx, Queue_ReserveNext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) Remove(ctx context.Context, in *QueueEntry, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, Queue_Remove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) Entries(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*QueueInfo, error) {
	out := new(QueueInfo)
	err := c.cc.Invoke(ctx, Queue_Entries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueServer is the server API for Queue service.
// All implementations must embed UnimplementedQueueServer
// for forward compatibility
type QueueServer interface {
	AddRequest(context.Context, *QueueEntry) (*emptypb.Empty, error)
	ReserveNext(context.Context, *emptypb.Empty) (*QueueEntry, error)
	Remove(context.Context, *QueueEntry) (*wrapperspb.BoolValue, error)
	Entries(context.Context, *emptypb.Empty) (*QueueInfo, error)
	mustEmbedUnimplementedQueueServer()
}

// UnimplementedQueueServer must be embedded to have forward compatible implementations.
type UnimplementedQueueServer struct {
}

func (UnimplementedQueueServer) AddRequest(context.Context, *QueueEntry) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRequest not implemented")
}
func (UnimplementedQueueServer) ReserveNext(context.Context, *emptypb.Empty) (*QueueEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveNext not implemented")
}
func (UnimplementedQueueServer) Remove(context.Context, *QueueEntry) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedQueueServer) Entries(context.Context, *emptypb.Empty) (*QueueInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Entries not implemented")
}
func (UnimplementedQueueServer) mustEmbedUnimplementedQueueServer() {}

// UnsafeQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueServer will
// result in compilation errors.
type UnsafeQueueServer interface {
	mustEmbedUnimplementedQueueServer()
}

func RegisterQueueServer(s grpc.ServiceRegistrar, srv QueueServer) {
	s.RegisterService(&Queue_ServiceDesc, srv)
}

func _Queue_AddRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).AddRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Queue_AddRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).AddRequest(ctx, req.(*QueueEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_ReserveNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).ReserveNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Queue_ReserveNext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).ReserveNext(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Queue_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).Remove(ctx, req.(*QueueEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_Entries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).Entries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Queue_Entries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).Entries(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Queue_ServiceDesc is the grpc.ServiceDesc for Queue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Queue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "radio.Queue",
	HandlerType: (*QueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRequest",
			Handler:    _Queue_AddRequest_Handler,
		},
		{
			MethodName: "ReserveNext",
			Handler:    _Queue_ReserveNext_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Queue_Remove_Handler,
		},
		{
			MethodName: "Entries",
			Handler:    _Queue_Entries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "radio.proto",
}
