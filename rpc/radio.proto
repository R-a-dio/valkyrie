syntax = "proto3";
package radio;
option go_package = "github.com/R-a-dio/valkyrie/rpc";

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

message Song {
    // song identifier (esong.id)
    int32 id = 1;
    // sha1 hexdigest of metadata contents
    string hash = 2;
    // short metadata
    string metadata = 3; // required
    // song length
    google.protobuf.Duration length = 4;
    // last time this song was played
    google.protobuf.Timestamp last_played = 5;

    // DatabaseTrack fields
    int32 track_id = 16;
    string artist = 17;
    string title = 18;
    string album = 19;
    string file_path = 20;
    string tags = 21;

    string acceptor = 22;
    string last_editor = 23;
    int32 priority = 24;
    bool usable = 25;

    google.protobuf.Timestamp last_requested = 26;
    int32 request_count = 27;
    google.protobuf.Duration request_delay = 28;
    // the time the fields above were acquired from the database
    google.protobuf.Timestamp sync_time = 100;
}

service Manager {
    // Status returns the current status
    rpc Status(google.protobuf.Empty) returns (StatusResponse);
    rpc SetUser(UserUpdate) returns (google.protobuf.Empty);
    rpc SetSong(SongUpdate) returns (google.protobuf.Empty);
    rpc SetStreamerConfig(StreamerConfig) returns (google.protobuf.Empty);
    rpc SetThread(google.protobuf.StringValue) returns (google.protobuf.Empty);
    rpc SetListenerInfo(ListenerInfo) returns (google.protobuf.Empty);
}

message StatusResponse {
    // the current user that is streaming
    User user = 1;
    // the current song being played
    Song song = 2;
    // information about the current song
    SongInfo info = 3;
    // information about the current listeners
    ListenerInfo listener_info = 4;
    // the current thread to be shown on the website or elsewhere
    string thread = 5;
    // the current configuration of the streamer
    StreamerConfig streamer_config = 6;
    // the display name given to us by the streaming user
    string streamer_name = 7;
}

message SongUpdate {
    Song song = 1;
    SongInfo info = 2;
}

message SongInfo {
    // the time this song started playing
    google.protobuf.Timestamp start_time = 3;
    // the time this song will end playing
    google.protobuf.Timestamp end_time = 4;
    // indicates if the song is a fallback track
    bool is_fallback = 5;
}

message StreamerConfig {
    // can users request songs to be played right now
    bool requests_enabled = 1;
    // the queue implementation to use for the streamer
    string queue_used = 2;
}

message UserUpdate {
    User user = 1;
    string streamer_name = 2;
}

message User {
    // user fields
    int32 id = 1;
    string username = 2;
    string password = 3;
    string email = 4;
    string remember_token = 5;
    string ip = 6;
    google.protobuf.Timestamp updated_at = 7;
    google.protobuf.Timestamp deleted_at = 8;
    google.protobuf.Timestamp created_at = 9;

    DJ dj = 10;
}

message DJ {
    // DJ fields
    int32 id = 1;
    string name = 2;
    string regex = 3;
    string text = 4;
    string image = 5;
    bool visible = 6;
    int32 priority = 7;
    string role = 8;
    string css = 9;
    string color = 10;
    
    Theme theme = 11;
}

message Theme {
    int32 id = 1;
    string name = 2;
    string display_name = 3;
    string author = 4;
}

message ListenerInfo {
    // the amount of listeners to the stream
    int64 listeners = 1;
}

service Announcer {
    rpc AnnounceSong(SongAnnouncement) returns (google.protobuf.Empty);
    rpc AnnounceRequest(SongRequestAnnouncement) returns (google.protobuf.Empty);
}

message SongAnnouncement {
    Song song = 1;
    SongInfo info = 2;
    ListenerInfo listener_info = 3;
}

message SongRequestAnnouncement {
    Song song = 1;
}

service Streamer {
    // Start starts the streamer
    rpc Start(google.protobuf.Empty) returns (StreamerResponse);
    // Stop stops the streamer, the boolean argument indicates if we should stop
    // right away, or wait until the current song ends
    rpc Stop(google.protobuf.BoolValue) returns (StreamerResponse);
    // RequestSong requests a song to be played by the streamer
    rpc RequestSong(SongRequest) returns (RequestResponse);
    // SetConfig changes the configuration of the streamer
    rpc SetConfig(StreamerConfig) returns (google.protobuf.Empty);
    // Queue returns the current queue contents of the streamer
    rpc Queue(google.protobuf.Empty) returns (QueueInfo);
}

message StreamerResponse {
    repeated Error error = 1;
}

// Queue is documented under the radio.QueueService interface in the Go package
service Queue {
    rpc AddRequest(QueueEntry) returns (google.protobuf.Empty);
    rpc ReserveNext(google.protobuf.Empty) returns (QueueEntry);
    rpc Remove(QueueEntry) returns (google.protobuf.BoolValue);
    rpc Entries(google.protobuf.Empty) returns (QueueInfo);
}

message QueueEntry {
    radio.Song song = 1;
    // is_user_request indicates if this was a request made by a human
    bool is_user_request = 2;
    // user_identifier is the way we identify the user that added this to the
    // queue; This can be anything that uniquely identifies a user
    string user_identifier = 3;
    // expected_start_time is the expected time this song will start playing
    google.protobuf.Timestamp expected_start_time = 4;
}

message QueueInfo {
    // the name of the queue implementation
    string name = 1;
    // the entries in the queue
    repeated QueueEntry entries = 2;
}

message SongRequest {
    string user_identifier = 1;
    Song song = 2;
}

message RequestResponse {
    repeated Error error = 1;
}

message Error {
    uint32 kind = 1;
    string op = 2;
    int32 song_id = 3;
    int32 track_id = 4;
    google.protobuf.Duration delay = 5;
    string info = 6;
    string error = 7;
}

