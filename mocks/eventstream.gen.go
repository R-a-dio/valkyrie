// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/R-a-dio/valkyrie/util/eventstream"
	"sync"
)

// Ensure, that StreamMock does implement eventstream.Stream.
// If this is not the case, regenerate this file with moq.
var _ eventstream.Stream[any] = &StreamMock[any]{}

// StreamMock is a mock implementation of eventstream.Stream.
//
//	func TestSomethingThatUsesStream(t *testing.T) {
//
//		// make and configure a mocked eventstream.Stream
//		mockedStream := &StreamMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			NextFunc: func() (T, error) {
//				panic("mock out the Next method")
//			},
//		}
//
//		// use mockedStream in code that requires eventstream.Stream
//		// and then make assertions.
//
//	}
type StreamMock[T any] struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// NextFunc mocks the Next method.
	NextFunc func() (T, error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Next holds details about calls to the Next method.
		Next []struct {
		}
	}
	lockClose sync.RWMutex
	lockNext  sync.RWMutex
}

// Close calls CloseFunc.
func (mock *StreamMock[T]) Close() error {
	if mock.CloseFunc == nil {
		panic("StreamMock.CloseFunc: method is nil but Stream.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedStream.CloseCalls())
func (mock *StreamMock[T]) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Next calls NextFunc.
func (mock *StreamMock[T]) Next() (T, error) {
	if mock.NextFunc == nil {
		panic("StreamMock.NextFunc: method is nil but Stream.Next was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNext.Lock()
	mock.calls.Next = append(mock.calls.Next, callInfo)
	mock.lockNext.Unlock()
	return mock.NextFunc()
}

// NextCalls gets all the calls that were made to Next.
// Check the length with:
//
//	len(mockedStream.NextCalls())
func (mock *StreamMock[T]) NextCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockNext.RLock()
	calls = mock.calls.Next
	mock.lockNext.RUnlock()
	return calls
}
