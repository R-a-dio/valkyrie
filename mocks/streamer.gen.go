// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/R-a-dio/valkyrie/streamer/audio"
	"os"
	"sync"
	"time"
)

// Ensure, that ReaderMock does implement audio.Reader.
// If this is not the case, regenerate this file with moq.
var _ audio.Reader = &ReaderMock{}

// ReaderMock is a mock implementation of audio.Reader.
//
//	func TestSomethingThatUsesReader(t *testing.T) {
//
//		// make and configure a mocked audio.Reader
//		mockedReader := &ReaderMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			GetFileFunc: func() *os.File {
//				panic("mock out the GetFile method")
//			},
//			ProgressFunc: func() time.Duration {
//				panic("mock out the Progress method")
//			},
//			ReadFunc: func(p []byte) (int, error) {
//				panic("mock out the Read method")
//			},
//			TotalLengthFunc: func() time.Duration {
//				panic("mock out the TotalLength method")
//			},
//		}
//
//		// use mockedReader in code that requires audio.Reader
//		// and then make assertions.
//
//	}
type ReaderMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// GetFileFunc mocks the GetFile method.
	GetFileFunc func() *os.File

	// ProgressFunc mocks the Progress method.
	ProgressFunc func() time.Duration

	// ReadFunc mocks the Read method.
	ReadFunc func(p []byte) (int, error)

	// TotalLengthFunc mocks the TotalLength method.
	TotalLengthFunc func() time.Duration

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// GetFile holds details about calls to the GetFile method.
		GetFile []struct {
		}
		// Progress holds details about calls to the Progress method.
		Progress []struct {
		}
		// Read holds details about calls to the Read method.
		Read []struct {
			// P is the p argument value.
			P []byte
		}
		// TotalLength holds details about calls to the TotalLength method.
		TotalLength []struct {
		}
	}
	lockClose       sync.RWMutex
	lockGetFile     sync.RWMutex
	lockProgress    sync.RWMutex
	lockRead        sync.RWMutex
	lockTotalLength sync.RWMutex
}

// Close calls CloseFunc.
func (mock *ReaderMock) Close() error {
	if mock.CloseFunc == nil {
		panic("ReaderMock.CloseFunc: method is nil but Reader.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedReader.CloseCalls())
func (mock *ReaderMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetFile calls GetFileFunc.
func (mock *ReaderMock) GetFile() *os.File {
	if mock.GetFileFunc == nil {
		panic("ReaderMock.GetFileFunc: method is nil but Reader.GetFile was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetFile.Lock()
	mock.calls.GetFile = append(mock.calls.GetFile, callInfo)
	mock.lockGetFile.Unlock()
	return mock.GetFileFunc()
}

// GetFileCalls gets all the calls that were made to GetFile.
// Check the length with:
//
//	len(mockedReader.GetFileCalls())
func (mock *ReaderMock) GetFileCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetFile.RLock()
	calls = mock.calls.GetFile
	mock.lockGetFile.RUnlock()
	return calls
}

// Progress calls ProgressFunc.
func (mock *ReaderMock) Progress() time.Duration {
	if mock.ProgressFunc == nil {
		panic("ReaderMock.ProgressFunc: method is nil but Reader.Progress was just called")
	}
	callInfo := struct {
	}{}
	mock.lockProgress.Lock()
	mock.calls.Progress = append(mock.calls.Progress, callInfo)
	mock.lockProgress.Unlock()
	return mock.ProgressFunc()
}

// ProgressCalls gets all the calls that were made to Progress.
// Check the length with:
//
//	len(mockedReader.ProgressCalls())
func (mock *ReaderMock) ProgressCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockProgress.RLock()
	calls = mock.calls.Progress
	mock.lockProgress.RUnlock()
	return calls
}

// Read calls ReadFunc.
func (mock *ReaderMock) Read(p []byte) (int, error) {
	if mock.ReadFunc == nil {
		panic("ReaderMock.ReadFunc: method is nil but Reader.Read was just called")
	}
	callInfo := struct {
		P []byte
	}{
		P: p,
	}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc(p)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//
//	len(mockedReader.ReadCalls())
func (mock *ReaderMock) ReadCalls() []struct {
	P []byte
} {
	var calls []struct {
		P []byte
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}

// TotalLength calls TotalLengthFunc.
func (mock *ReaderMock) TotalLength() time.Duration {
	if mock.TotalLengthFunc == nil {
		panic("ReaderMock.TotalLengthFunc: method is nil but Reader.TotalLength was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTotalLength.Lock()
	mock.calls.TotalLength = append(mock.calls.TotalLength, callInfo)
	mock.lockTotalLength.Unlock()
	return mock.TotalLengthFunc()
}

// TotalLengthCalls gets all the calls that were made to TotalLength.
// Check the length with:
//
//	len(mockedReader.TotalLengthCalls())
func (mock *ReaderMock) TotalLengthCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTotalLength.RLock()
	calls = mock.calls.TotalLength
	mock.lockTotalLength.RUnlock()
	return calls
}
